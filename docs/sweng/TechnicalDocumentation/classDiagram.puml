@startuml


package gui {
package bibtexparser {
  class ExtractBibtexDialog{
    {field} -Button buttonParse
    {field} -Button buttonParseToNewLib
    {field} -StateManager stateManager
    {field} -BibtextExtractorViewModel viewModel
    {field} -BibDatabaseContext database
    {field} -boolean directAdd

    {method} +buttonParse.setOnAction(e-->{ directAdd = true;
    viewModel.startParsing(directAdd);});
    {method} +buttonParseToNewLib.setOnAction( e-->{directAdd = false;
    viewModel.startParsing(directAdd)}
    {method} +ExtractBibtexDialog()
    {method} -initialize() :void
    {method} +ViewLoader.view

  }
  class BibtextExtractorViewModel{
      {field} -BibDatabaseContext bibDatabaseContext
      {field} -StringProperty inputText
      {field} -BibEntry bibEntry
      {field} -BibDatabaseContext newDatabaseContext
      {field} -boolean directAdd
      {field} -List<BibEntry> extractedEntries
      {method} +startParsing(boolean directAdd) :void
      {method} -trackNewEntry(EntryType type) :void
      {method} +executeParse() :void
      {method} +inputTextProperty() : StringProperty



  }

  class ExtractBibtexDialog.fxml

  ExtractBibtexDialog *-- ExtractBibtexDialog.fxml
  ExtractBibtexDialog --> BibtextExtractorViewModel


    }
   }

package logic{
  package importer {
   package fetcher{


     class GrobidCitationFetcher{

        {field} -FileUpdateMonitor fileUpdateMonitor
        {field} -ImportFormatPreferences importFormatPreferences
        {field} -GrobidService grobidService
        {method} +GrobidCitationFetcher(ImportFormatPreferences importFormatPreferences, FileUpdateMonitor fileUpdateMonitor, JabRefPrefrences jabRefPreferences)
        {method} -parseUsingGrobid(String plaintext) : String
        {method} -parseToBibEntry(String bibTexString) :Optional<BibEntry>
        {method} +performSearch(String query) : List<BibEntry>



        }





}

package util{

  class GrobidService{

     {field} {static} -JabRefPrefrences jabRefPreferences
     {method} +GrobidService(JabRefPrefrences jabRefPreferences)
     {method} +processCitation(String rawCitation, int consolidateCitations) :String


  }

  class GrobidServiceException{
    {method} +GrobidServiceException(String message)
    {method} +GrobidServiceException(String message, Throwable cause)
  }
    GrobidServiceException --- GrobidService
  }

package net{

  class URLDownload{


    {method}  +URLDownload(String url)
    {method}  +setPostData(String params) : void
    {method}  +asString() : String

  }


}


  package fileformat{
    package mods{
      class BibtexParser{
        {method} {static} +singleFromString(String bibtexString, ImportFormatPreferences importFormatPreferences, FileUpdateMonitor fileMonitor)
      }
    }
  }
}

}


GrobidCitationFetcher *-- BibtexParser
GrobidCitationFetcher *-- URLDownload
BibtextExtractorViewModel --> GrobidCitationFetcher
GrobidCitationFetcher --> BibtextExtractorViewModel
GrobidCitationFetcher *--GrobidService


@enduml
