buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0-M1'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id "de.sebastianboegl.shadow.transformer.log4j" version "2.1.1"
}

apply plugin: 'application'

jacoco {
    toolVersion = '0.8.0'
}

mainClassName = "org.jabref.JabRefMain"

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
}

dependencies {
    compile project(':org.jabref.model')
    compile project(':org.jabref.logic')

    compile fileTree(dir: 'lib', includes: ['*.jar'])

    compile 'org.json:json:20160212'

    compile 'org.antlr:antlr4-runtime:4.7.1'

    compile 'com.jgoodies:jgoodies-forms:1.9.0'

    // update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517
    compile 'org.apache.pdfbox:pdfbox:1.8.13'

    compile 'commons-cli:commons-cli:1.4'

    compile "org.libreoffice:juh:5.4.2"
    compile "org.libreoffice:ridl:5.4.2"
    compile "org.libreoffice:unoil:5.4.2"


    // VersionEye states that 6.0.5 is the most recent version, but http://dev.mysql.com/downloads/connector/j/ shows that as "Development Release"
    runtime 'mysql:mysql-connector-java:5.1.45'

    compile 'com.impossibl.pgjdbc-ng:pgjdbc-ng:0.7.1'

    compile 'net.java.dev.glazedlists:glazedlists_java15:1.9.1'

    compile 'com.google.guava:guava:24.0-jre'

    // JavaFX stuff

    // compile 'com.airhacks:afterburner.fx:1.7.0' -- currently JabRef's fork - therefore, we have to include the indirect dependency:
    compile group: 'javax.inject', name: 'javax.inject', version:'1'

    compile 'de.codecentric.centerdevice:javafxsvg:1.2.1'
    compile 'de.jensd:fontawesomefx-commons:8.15'
    compile 'de.jensd:fontawesomefx-materialdesignfont:1.7.22-4'
    compile 'de.saxsys:mvvmfx-validation:1.7.0'
    compile 'org.fxmisc.easybind:easybind:1.0.3'
    compile 'org.fxmisc.flowless:flowless:0.6'
    compile 'org.fxmisc.richtext:richtextfx:0.8.2'
    compile 'org.reactfx:reactfx:2.0-M5'

    // Cannot be updated to 9.*.* until Jabref works with Java 9
    compile 'org.controlsfx:controlsfx:8.40.15-SNAPSHOT'

    compile 'com.mashape.unirest:unirest-java:1.4.9'
    compile 'org.apache.httpcomponents:httpclient:4.5.3'

    // >1.8.0-beta is required for java 9 compatibility
    compile 'org.slf4j:slf4j-api:1.8.0-beta1'
    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'org.apache.logging.log4j:log4j-core:2.10.0'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.10.0'
    runtime 'org.apache.logging.log4j:log4j-jcl:2.10.0'

    // need to use snapshots as the stable version is from 2013 and doesn't support v1.0.1 CitationStyles
    runtime 'org.citationstyles:styles:1.0.1-SNAPSHOT'
    runtime 'org.citationstyles:locales:1.0.1-SNAPSHOT'

    compile group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '1.0.9'
    compile group: 'com.microsoft.azure', name: 'applicationinsights-logging-log4j2', version: '1.0.9'

    testCompile 'com.tngtech.archunit:archunit-junit:0.5.0'

    testCompile 'org.assertj:assertj-core:3.8.0'
    testCompile 'org.assertj:assertj-swing:3.8.0'
    testCompile 'org.assertj:assertj-swing-junit:3.8.0'
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit:4.0.+"
    testCompile 'com.tngtech.archunit:archunit:0.5.0'
}

processResources {
    filteringCharset = 'UTF-8'

    filesMatching("resource/**/meta.xml") {
        expand version: project.version
    }
}

// Test tasks
junitPlatform {
    filters {
        tags {
            exclude 'DatabaseTest', 'FetcherTest', 'GUITest', 'org.jabref.testutils.category.FetcherTest', 'org.jabref.testutils.category.GUITest'
        }
    }

    logManager 'org.apache.logging.log4j.jul.LogManager'
}

task databaseTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.DatabaseTest'
    }
}

task fetcherTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.FetcherTest'
    }
}

task guiTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.GUITest'
    }
}

// Test result tasks
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    jacoco {
        append = true
    }
}

task jacocoMerge(type: JacocoMerge) {
    executionData file("$buildDir/jacoco/junitPlatformTest.exec"), file("$buildDir/jacoco/databaseTest.exec"), file("$buildDir/jacoco/fetcherTest.exec")
    dependsOn junitPlatformTest, databaseTest, fetcherTest
}

jacocoTestReport {
    executionData jacocoMerge.destinationFile
    dependsOn jacocoMerge

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

afterEvaluate {
    def junitPlatformTest = tasks.junitPlatformTest

    jacoco {
        applyTo(junitPlatformTest)
    }

    task jacocoJunit5TestReport(type: JacocoReport) {
        executionData jacocoMerge.destinationFile
        dependsOn jacocoMerge
        sourceSets sourceSets.main
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.enabled true
            html.enabled true
        }
    }
}

shadowJar {
    classifier 'fat'
}
