package org.jabref.logic.importer.util;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Duration;
import java.util.List;

import org.jabref.logic.importer.ImportFormatPreferences;
import org.jabref.logic.importer.ParseException;
import org.jabref.logic.importer.fileformat.BibtexParser;
import org.jabref.logic.net.URLDownload;
import org.jabref.model.entry.BibEntry;
import org.jabref.model.util.DummyFileUpdateMonitor;

/**
 * Implements an API to a GROBID server, as described at
 * https://grobid.readthedocs.io/en/latest/Grobid-service/#grobid-web-services
 * <p>
 * Note: Currently a custom GROBID server is used...
 * https://github.com/NikodemKch/grobid
 * <p>
 * The methods are structured to match the GROBID server api.
 * Each method corresponds to a GROBID service request. Only the ones already used are already implemented.
 */
public class GrobidService {

    public static String HTTP_REQUEST_BOUNDARY = "---------------------------JabRefRequest";

    public enum ConsolidateCitations {
        NO(0), WITH_METADATA(1), WITH_DOI_ONLY(2);
        private int code;

        ConsolidateCitations(int code) {
            this.code = code;
        }

        public int getCode() {
            return this.code;
        }
    }

    String grobidServerURL;

    public GrobidService(String grobidServerURL) {
        this.grobidServerURL = grobidServerURL;
    }

    /**
     * Calls the Grobid server for converting the citation into BibTeX
     *
     * @return A plain BibTeX string (generated by the Grobid server)
     * @throws IOException if an I/O excecption during the call ocurred or no BibTeX entry could be determiend
     */
    public String processCitation(String rawCitation, ConsolidateCitations consolidateCitations) throws IOException {
        rawCitation = URLEncoder.encode(rawCitation, StandardCharsets.UTF_8);
        URLDownload urlDownload = new URLDownload(grobidServerURL
                + "/api/processCitation");
        urlDownload.setConnectTimeout(Duration.ofSeconds(5));
        urlDownload.addHeader("Accept", MediaTypes.APPLICATION_BIBTEX);
        urlDownload.setPostData("citations=" + rawCitation + "&consolidateCitations=" + consolidateCitations);
        String httpResponse = urlDownload.asString();

        if (httpResponse == null || httpResponse.equals("@misc{-1,\n  author = {}\n}\n")) { // This filters empty BibTeX entries
            throw new IOException("The GROBID server response does not contain anything.");
        }

        return httpResponse;
    }

    public List<BibEntry> processPDF(Path filePath, ImportFormatPreferences importFormatPreferences) throws IOException, ParseException {
        URLDownload urlDownload = new URLDownload(grobidServerURL
                + "/api/processHeaderDocument"); // shall we use processFulltextDocument?
        urlDownload.setConnectTimeout(Duration.ofSeconds(150));
        urlDownload.addHeader("Accept", MediaTypes.APPLICATION_BIBTEX);
        urlDownload.addHeader("Content-Type", "multipart/form-data; boundary=" + HTTP_REQUEST_BOUNDARY);
        urlDownload.setPostData(readPdf(filePath));
        String httpResponse = urlDownload.asString();

        if (httpResponse == null || httpResponse.equals("@misc{-1,\n  author = {}\n}\n")) { // This filters empty BibTeX entries
            throw new IOException("The GROBID server response does not contain anything.");
        }

        BibtexParser parser = new BibtexParser(importFormatPreferences, new DummyFileUpdateMonitor());
        return parser.parseEntries(httpResponse);
    }

    private byte[] readPdf(Path filePath) throws IOException {
        StringBuilder preFile = new StringBuilder();
        preFile.append("--");
        preFile.append(HTTP_REQUEST_BOUNDARY);
        preFile.append("\r\n");
        preFile.append("Content-Disposition: form-data; name=\"consolidateHeader\"\r\n\r\n1\r\n--");
        preFile.append(HTTP_REQUEST_BOUNDARY);
        preFile.append("\r\n");
        preFile.append("Content-Disposition: form-data; name=\"input\"; filename=\"");
        preFile.append(filePath.getFileName().toString());
        preFile.append("\"\r\nContent-Type: application/pdf\r\n\r\n");
        byte[] preFileBytes = preFile.toString().getBytes();

        byte[] fileContent = Files.readAllBytes(filePath);

        StringBuilder postFile = new StringBuilder();
        postFile.append("\r\n--");
        postFile.append(HTTP_REQUEST_BOUNDARY);
        postFile.append("\r\n");
        postFile.append("Content-Disposition: form-data; name=\"input\"\r\n\r\n\r\n--");
        postFile.append(HTTP_REQUEST_BOUNDARY);
        postFile.append("--\r\n");
        byte[] postFileBytes = postFile.toString().getBytes();

        byte[] post = new byte[preFileBytes.length + fileContent.length + postFileBytes.length];
        System.arraycopy(preFileBytes, 0, post, 0, preFileBytes.length);
        System.arraycopy(fileContent, 0, post, preFileBytes.length, fileContent.length);
        System.arraycopy(postFileBytes, 0, post, preFileBytes.length + fileContent.length, postFileBytes.length);
        return post;
    }
}
