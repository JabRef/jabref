
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        maven {
            url 'http://maven.ej-technologies.com/repository'
        }
    }
    dependencies {
        classpath 'com.github.edwgiz:maven-shade-plugin.log4j2-cachefile-transformer:2.1'
    }
}

plugins {
    id "com.install4j.gradle" version "6.1.1"
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    // TODO replaced by spotless plugin, needs to be updated
    id "com.github.youribonnaffe.gradle.format" version "1.5"
    id "net.ltgt.errorprone" version "0.0.8"
    id 'me.champeau.gradle.jmh' version '0.3.0'
}

apply plugin: "java"
apply plugin: "application"
apply plugin: "project-report"
apply plugin: 'jacoco'
apply plugin: 'install4j'
apply plugin: 'me.champeau.gradle.jmh'

apply plugin: 'checkstyle'

apply from: 'eclipse.gradle'

group = "net.sf.jabref"
version = "3.4dev"
project.ext.threeDotVersion = "3.3.0.1"
project.ext.install4jDir = hasProperty("install4jDir") ? getProperty("install4jDir") : (OperatingSystem.current().isWindows() ? 'C:/Program Files/install4j6' : 'install4j6')
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "net.sf.jabref.JabRefMain"

install4j {
    installDir = file(project.ext.install4jDir)
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}


repositories {
    jcenter()
}

configurations {
    antlr3
    antlr4
	
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'com.jgoodies:jgoodies-common:1.8.1'
    compile 'com.jgoodies:jgoodies-forms:1.9.0'
    compile 'com.jgoodies:jgoodies-looks:2.7.0'

    compile 'org.swinglabs:swingx:1.6.1' // do not update, 1.6.5.1 is broken

    compile 'org.apache.pdfbox:pdfbox:1.8.11'
    compile 'org.apache.pdfbox:fontbox:1.8.11'
    compile 'org.apache.pdfbox:jempbox:1.8.11'
    compile 'org.bouncycastle:bcprov-jdk15on:1.54'

    compile 'commons-cli:commons-cli:1.3.1'

    compile 'org.openoffice:juh:4.1.2'
    compile 'org.openoffice:jurt:4.1.2'
    compile 'org.openoffice:ridl:4.1.2'
    compile 'org.openoffice:unoil:4.1.2'

    compile 'com.googlecode.java-diff-utils:diffutils:1.3.0'

    antlr3 'org.antlr:antlr:3.5.2'
    compile 'org.antlr:antlr-runtime:3.5.2'

    antlr4 'org.antlr:antlr4:4.5.3'
    compile 'org.antlr:antlr4-runtime:4.5.3'

    compile 'mysql:mysql-connector-java:5.1.38'
    compile 'org.postgresql:postgresql:9.4.1208'

    compile 'net.java.dev.glazedlists:glazedlists_java15:1.9.1'
    compile fileTree(dir: 'lib', includes: ['*.jar'])

    compile 'com.google.guava:guava:19.0'

    compile 'commons-logging:commons-logging:1.2'

    compile 'org.jsoup:jsoup:1.9.1'
    compile 'com.mashape.unirest:unirest-java:1.4.9'

    compile 'org.apache.logging.log4j:log4j-jcl:2.5'
    compile 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.github.tomakehurst:wiremock:1.58'
	testCompile 'org.assertj:assertj-swing-junit:3.2.0'
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/gen"]
        }
    }	
	integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

processResources {
    filesMatching("build.properties") {
        expand(version: project.version,
                "year": String.valueOf(Calendar.getInstance().get(Calendar.YEAR)),
                "authors": new File('AUTHORS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "developers": new File('DEVELOPERS').readLines().findAll { !it.startsWith("#") }.join(", "))
    }

    filesMatching("resource/**/meta.xml") {
        expand version: project.version
    }
}

clean {
    delete "src/main/gen"
}

task generateSource(dependsOn: ["generateBstGrammarSource", "generateSearchGrammarSource"]) {
    group = 'JabRef'
    description 'Generates all Java source files.'
}

task generateBstGrammarSource(type: JavaExec) {
    group 'JabRef'
    description 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.'

    File antlrSource = file('src/main/antlr3/net/sf/jabref/bst/Bst.g')

    inputs.file antlrSource
    outputs.file file('src/main/gen/net/sf/jabref/bst/BstLexer.java')
    outputs.file file('src/main/gen/net/sf/jabref/bst/BstParser.java')

    main = 'org.antlr.Tool'
    classpath = configurations.antlr3
    args = ["-o", file('src/main/gen/net/sf/jabref/bst/'), antlrSource]
}

task generateSearchGrammarSource(type: JavaExec) {
    String grammarFile = "Search"

    group 'JabRef'
    description "Generates java files for ${grammarFile}.g antlr4."

    String packagePath = "net/sf/jabref/search"
    File antlrPath = file("src/main/antlr4")
    File genPath = file("src/main/gen")

    File antlrSource = file("$antlrPath/$packagePath/${grammarFile}.g4")
    File destinationDir = file("$genPath/$packagePath")

    inputs.file antlrSource
    outputs.file file("$destinationDir/${grammarFile}Parser.java")
    outputs.file file("$destinationDir/${grammarFile}Lexer.java")
    outputs.file file("$destinationDir/${grammarFile}Visitor.java")
    outputs.file file("$destinationDir/${grammarFile}BaseVisitor.java")
    outputs.file file("$destinationDir/${grammarFile}.tokens")
    outputs.file file("$destinationDir/${grammarFile}Lexer.tokens")

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = ["-o", destinationDir, "-visitor", "-no-listener", "-package", "net.sf.jabref.search", antlrSource]
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:none"
}
compileJava.dependsOn "generateSource"

compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options {
        encoding = 'UTF-8'
        version = true
        author = true
    }
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

  
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    jacoco {
        append = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// enables `gradlew format`. Currently `LabelPatternUtil.java` is destroyed. Use with care!
format {
    configurationFile = file('ide-settings/formatter_settings.xml')
    // default: reformat main and test
    //files = sourceSets.main.java
}

shadowJar {
    classifier 'fat'

    transform(new com.github.jengelman.gradle.plugins.shadow.transformers.Transformer() {

        // this is an adapter required for generating a fat jar with correct log4j2 output

        com.github.edwgiz.mavenShadePlugin.log4j2CacheTransformer.PluginsCacheFileTransformer target = new com.github.edwgiz.mavenShadePlugin.log4j2CacheTransformer.PluginsCacheFileTransformer();

        @Override
        boolean canTransformResource(FileTreeElement element) {
            return target.canTransformResource(element.getPath());
        }

        @Override
        void transform(String path, InputStream is, List<com.github.jengelman.gradle.plugins.shadow.relocation.Relocator> relocators) {
            target.processResource(path, is, relocators);
        }

        @Override
        boolean hasTransformedResource() {
            return target.hasTransformedResource();
        }

        @Override
        void modifyOutputStream(org.apache.tools.zip.ZipOutputStream jos) {
            target.modifyOutputStream(jos);
        }
    })
}

/*
 * Changes project.version to VERSION--snapshot--DATE--GIT_HASH
 */
if (hasProperty('dev')) {
    String command = "git log --pretty=format:%cd--%h -n 1 --date=short"
    String commitInfo = ""
    if (OperatingSystem.current().isWindows()) {
        commitInfo = "cmd /c $command".execute().in.text
    } else {
        commitInfo = command.execute().in.text
    }

    // determine branch
    command = "git symbolic-ref -q --short HEAD"
    String branchName = ""
    if (OperatingSystem.current().isWindows()) {
        branchName = "cmd /c $command".execute().in.text
    } else {
        branchName = command.execute().in.text
    }
    // A newline is returned. Remove it. (trim())
    // In the context of github, the branch name could be something like "pull/277"
    // "/" is an illegal character. To be safe, all illegal filename characters are replaced by "_"
    // http://stackoverflow.com/a/15075907/873282 describes the used pattern.
    branchName = branchName.trim().replaceAll("[^a-zA-Z0-9.-]", "_");

    // hack string
    // first the date (%cd), then the branch name, and finally the commit id (%h)
    String infoString = commitInfo.substring(0, 10) + "--" + branchName + "--" + commitInfo.substring(12)

    project.version += "--snapshot--" + infoString
}

// has to be defined AFTER 'dev' things to have the correct project.version
task media(type: com.install4j.gradle.Install4jTask, dependsOn: "releaseJar") {
    projectFile = file('jabref.install4j')
    release = project.version
    variables = [
            versionFourDots: project.ext.threeDotVersion,
            buildFileName  : jar.archiveName,
            version        : project.version
    ]

    doLast {
        copy {
            from "build/install4j"
            into "build/releases"
        }
    }
}

checkstyle {
    // do not use other packages for checkstyle, excluding gen(erated) sources
    checkstyleMain.source = "src/main/java"
    toolVersion = '6.17'
}

task release(dependsOn: ["media", "releaseJar"]) {
    group = 'JabRef - Release'
    description 'Creates a release for all target platforms.'
}

task releaseJar(dependsOn: "shadowJar") {
    group = 'JabRef - Release'
    description "Creates a Jar release."

    doLast {
        copy {
            from("$buildDir/libs/JabRef-${project.version}-fat.jar")
            into("$buildDir/releases")

            rename { String fileName ->
                fileName.replace('-fat', '')
            }
        }
    }
}

// fetch all dependencies to speedup CircleCI build
// this is necessary until https://discuss.circleci.com/t/effective-caching-for-gradle/540 is resolved
// see http://stackoverflow.com/a/27455099/873282 for an inspiration of this task
// better solution: https://discuss.gradle.org/t/how-to-download-maven-dependencies-into-project-local-directory-and-set-eclipse-classpath/9851
task getdeps(type: Copy) {
    from(configurations.compile + configurations.antlr3 + configurations.antlr4 + configurations.testCompile) {
        include "*.jar"
    }
    into 'build/tmp/alldeps/'
}

jmh {
    warmupIterations = 5
    iterations = 10
    fork = 2
}
