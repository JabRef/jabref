import org.gradle.internal.os.OperatingSystem

plugins {
    id "eu.appsatori.fatjar" version "0.3"
    id "edu.sc.seis.launch4j" version "1.1.4"
    id "com.github.kt3k.coveralls" version "2.4.0"
    id "edu.sc.seis.macAppBundle" version "2.1.1"
    id "com.github.youribonnaffe.gradle.format" version "1.2"
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "application"
apply plugin: "project-report"
apply plugin: "sonar-runner"
apply plugin: "maven"
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

group = "net.sf.jabref"
version = "2.80dev"
project.ext.threeDotVersion = "2.80.0.0"
project.ext.nsisExec = hasProperty("nsisExec") ? getProperty("nsisExec") : "C:/Program Files/NSIS/makensis.exe"
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "net.sf.jabref.JabRefMain"

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

repositories {
    jcenter()
}

configurations {
    antlr3
    antlr4
}

dependencies {
    compile 'com.jgoodies:jgoodies-common:1.8.1'
    compile 'com.jgoodies:jgoodies-forms:1.9.0'
    compile 'com.jgoodies:jgoodies-looks:2.7.0'

    compile 'org.swinglabs.swingx:swingx-core:1.6.5-1'

    compile 'org.apache.pdfbox:pdfbox:1.8.10'
    compile 'org.apache.pdfbox:fontbox:1.8.10'
    compile 'org.apache.pdfbox:jempbox:1.8.10'

    compile 'commons-cli:commons-cli:1.3.1'

    compile 'org.openoffice:juh:3.2.1'
    compile 'org.openoffice:jurt:3.2.1'
    compile 'org.openoffice:ridl:3.2.1'
    compile 'org.openoffice:unoil:3.2.1'

    antlr3 'org.antlr:antlr:3.5.2'
    compile 'org.antlr:antlr-runtime:3.5.2'

    antlr4 'org.antlr:antlr4:4.5.1-1'
    compile 'org.antlr:antlr4-runtime:4.5.1-1'

    compile 'mysql:mysql-connector-java:5.1.36'
    compile 'org.postgresql:postgresql:9.4-1201-jdbc41'

    compile 'net.java.dev.glazedlists:glazedlists_java15:1.9.1'
    compile fileTree(dir: 'lib', includes: ['*.jar'])

    compile 'net.java.dev.jna:jna:4.1.0'

    compile 'com.google.guava:guava:18.0'

    compile 'commons-logging:commons-logging:1.2'

    compile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/gen"]
        }
    }
}

processResources {
    filesMatching("help/**/About.html") {
        expand ("version": project.version,
                "year": String.valueOf(Calendar.getInstance().get(Calendar.YEAR)),
                "authors": new File('AUTHORS').readLines().findAll {!it.startsWith("#")}.join(", "))
    }

    filesMatching("resource/build.properties") {
        expand version: project.version
    }

    filesMatching("resource/**/meta.xml") {
        expand version: project.version
    }
}

clean {
    delete "src/main/gen"
}

task generateSource(dependsOn: ["generateBstGrammarSource", "generateSearchGrammarSource"]) {
    group = 'JabRef'
    description 'Generates all Java source files.'
}

task generateBstGrammarSource(type: JavaExec) {
    group 'JabRef'
    description 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.'

    File antlrSource = file('src/main/antlr3/net/sf/jabref/bst/Bst.g')

    inputs.file antlrSource
    outputs.file file('src/main/gen/net/sf/jabref/bst/BstLexer.java')
    outputs.file file('src/main/gen/net/sf/jabref/bst/BstParser.java')

    main = 'org.antlr.Tool'
    classpath = configurations.antlr3
    args = ["-o", file('src/main/gen/net/sf/jabref/bst/'), antlrSource]
}

task generateSearchGrammarSource(type: JavaExec) {
    String grammarFile = "Search"

    group 'JabRef'
    description "Generates java files for ${grammarFile}.g antlr4."

    String packagePath = "net/sf/jabref/search"
    File antlrPath = file("src/main/antlr4")
    File genPath = file("src/main/gen")

    File antlrSource = file("$antlrPath/$packagePath/${grammarFile}.g4")
    File destinationDir = file("$genPath/$packagePath")

    inputs.file antlrSource
    outputs.file file("$destinationDir/${grammarFile}Parser.java")
    outputs.file file("$destinationDir/${grammarFile}Lexer.java")
    outputs.file file("$destinationDir/${grammarFile}Visitor.java")
    outputs.file file("$destinationDir/${grammarFile}BaseVisitor.java")
    outputs.file file("$destinationDir/${grammarFile}.tokens")
    outputs.file file("$destinationDir/${grammarFile}Lexer.tokens")

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = ["-o", destinationDir, "-visitor", "-no-listener", "-package", "net.sf.jabref.search", antlrSource]
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:none"
}
compileJava.dependsOn "generateSource"

compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options {
        encoding = 'UTF-8'
        version = true
        author = true
    }
}

test {
    testLogging {
        exceptionFormat "full" // default is "short"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// enables `gradlew format`. Currently `LabelPatternUtil.java` is destroyed. Use with care!
format {
    configurationFile = file('ide-settings/formatter_settings.xml')
    // default: reformat main and test
    //files = sourceSets.main.java
}

fatJar {
    classifier 'fat'
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}



/*
 * Changes project.version to VERSION--snapshot--DATE--GIT_HASH
 */
if (hasProperty('dev')) {
    String command = "git log --pretty=format:'%cd--%h' -n 1 --date=short"
    String result = ""
    if (OperatingSystem.current().isWindows()) {
        result = "cmd /c $command".execute().in.text
    } else {
        result = command.execute().in.text
    }

    // remove enclosing ' of result
    project.version += "--snapshot--" + result.substring(1, result.length() - 1)
}

task release(dependsOn: ["releaseWindows", "releaseMac", "releaseJar", "releaseSourceZip", "releaseSourceTar"]) {
    group = 'JabRef - Release'
    description 'Creates a release for all target platforms.'
}

launch4j {
    mainClassName = project.mainClassName
    version = project.ext.threeDotVersion
    textVersion = project.version
    jar = "../libs/JabRef-${project.version}-fat.jar"
    icon = "${projectDir}/src/main/resources/images/icons/JabRef.ico"
    copyright = "JabRef developers"
    initialHeapSize = 32
    maxHeapSize = 512
}
createExe.dependsOn "fatJar"

task releaseJar(dependsOn: "fatJar") {
    group = 'JabRef - Release'
    description "Creates a Jar release."

    doLast {
        copy {
            from("$buildDir/libs/JabRef-${project.version}-fat.jar")
            into("$buildDir/releases")

            rename { String fileName ->
                fileName.replace('-fat', '')
            }
        }
    }
}

task releaseWindows(dependsOn: "launch4j") {
    group = 'JabRef - Release'
    description "Creates a Windows release."

    doLast {
        copy {
            from("$projectDir/LICENSE")
            from("$projectDir/README.md")
            from("$buildDir/launch4j/JabRef.exe")
            into("$buildDir/nsis")
        }
        if (OperatingSystem.current().isWindows()) {
            exec {
               commandLine project.ext.nsisExec, "/DVERSION=${version}", "${projectDir}/buildres/nsis/setup.nsi"
            }
        } else {
            exec {
                commandLine project.ext.nsisExec, "-DVERSION=${version}", "${projectDir}/buildres/nsis/setup.nsi"
            }
        }
        copy {
            from("$buildDir/nsis/JabRefSetup-${version}.exe")
            from("$buildDir/nsis/JabRef.exe")
            into("$buildDir/releases")
        }
    }
}

if(!OperatingSystem.current().isMacOsX()) {
    // disable this task as it requires a command line tool only available on Mac OS X
    createDmg.enabled = false
}

task releaseMac(dependsOn: "createAppZip") {
    group = 'JabRef - Release'
    description "Creates an OSX release."

    doLast {
        copy {
            from "$buildDir/distributions/JabRef-${project.version}.zip"
            into "$buildDir/releases"
            rename { String fileName ->
                fileName.replace('.zip', '-OSX.zip')
            }
        }
    }
}

macAppBundle {
    mainClassName = project.mainClassName
    icon = "src/main/resources/images/icons/JabRef-Logo.icns"
    highResolutionCapable = true

    def map = [
            "CFBundleTypeName"      : "BibTeX file",
            "CFBundleTypeRole"      : "Editor",
            "CFBundleTypeIconFile"  : "JabRef-Logo.icns",
            "CFBundleTypeExtensions": ["bib"]
    ]
    bundleExtras.put("CFBundleDocumentTypes", [map])
}

task releaseSourceZip(type: Exec) {
    group = 'JabRef - Release'
    description "Creates a zip archive of the source code."

    if (OperatingSystem.current().isWindows()) {
        commandLine 'cmd', '/c', "git -c core.autocrlf=false -c core.eol=lf archive HEAD --format=zip > ${buildDir}/releases/JabRef-${version}-src.zip"
    } else {
        commandLine "bash", "-c", "git -c core.autocrlf=false -c core.eol=lf archive HEAD --format=zip > ${buildDir}/releases/JabRef-${version}-src.zip"
    }

    doFirst {
        mkdir("$buildDir/releases")
    }
}

task releaseSourceTar(type: Exec) {
    group = 'JabRef - Release'
    description "Creates a tar archive of the source code."

    if (OperatingSystem.current().isWindows()) {
        commandLine 'cmd', '/c', "git -c core.autocrlf=false -c core.eol=lf archive HEAD > ${buildDir}/releases/JabRef-${version}-src.tar.gz"
    } else {
        commandLine "bash", "-c", "git -c core.autocrlf=false -c core.eol=lf archive HEAD > ${buildDir}/releases/JabRef-${version}-src.tar.gz"
    }

    doFirst {
        mkdir("$buildDir/releases")
    }
}
