import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem
import org.jabref.build.antlr.JabRefAntlrPlugin
import org.jabref.build.localization.LocalizationPlugin
import org.jabref.build.xjc.XjcPlugin
import org.jabref.build.xjc.XjcTask

// to update the gradle wrapper, execute
// ./gradlew wrapper --gradle-version=4.4.1 --distribution-type=bin

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
}

plugins {
    id 'application'
    id 'com.gradle.build-scan' version '2.4.2'
    id "com.simonharrer.modernizer" version '1.8.0-1'
    id 'me.champeau.gradle.jmh' version '0.4.8'
    //id 'net.ltgt.errorprone' version '0.8.1'
    id 'com.github.ben-manes.versions' version '0.25.0'
    id 'org.javamodularity.moduleplugin' version '1.5.0'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.16.0'
}

// use the gradle build scan feature: https://scans.gradle.com/get-started
buildScan { termsOfServiceUrl = 'https://gradle.com/terms-of-service'; termsOfServiceAgree = 'yes' }

// show stacktrace on error
gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'project-report'
apply plugin: 'jacoco'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'checkstyle'
apply plugin: JabRefAntlrPlugin
apply plugin: XjcPlugin
apply plugin: LocalizationPlugin

apply from: 'eclipse.gradle'

group = "org.jabref"
version = "5.0.0"
sourceCompatibility = 11
targetCompatibility = 11
mainClassName = "$moduleName/org.jabref.JabRefLauncher"

// TODO: Ugly workaround to temporarily ignore build errors to dependencies of latex2unicode
// These should be removed, as well as the files in the lib folder, as soon as they have valid module names
patchModules.config = [
        "test=fastparse_2.12-1.0.0.jar",
        "test2=fastparse-utils_2.12-1.0.0.jar",
        "test3=sourcecode_2.12-0.1.4.jar"
]

// These are the Java version requirements we will check on each start of JabRef
ext.minRequiredJavaVersion = "1.8.0_171"
ext.allowJava9 = true

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/gen"]
        }

        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/groups/public' }
    maven { url 'https://repository.apache.org/snapshots' }
}

configurations {
    //errorprone
    libreoffice

    // TODO: Remove the following workaround for split error messages such as
    // error: module java.xml.bind reads package javax.annotation from both jsr305 and java.annotation
    compile {
        exclude group: "javax.activation"
    }
}

javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing' ]
}

dependencies {
    // Include all jar-files in the 'lib' folder as dependencies
    compile fileTree(dir: 'lib', includes: ['*.jar'])

    compile 'org.apache.pdfbox:pdfbox:2.0.17'
    compile 'org.apache.pdfbox:fontbox:2.0.17'
    compile 'org.apache.pdfbox:xmpbox:2.0.17'

    compile group: 'org.apache.tika', name: 'tika-core', version: '1.22'

    // required for reading write-protected PDFs - see https://github.com/JabRef/jabref/pull/942#issuecomment-209252635
    compile 'org.bouncycastle:bcprov-jdk15on:1.63'

    compile 'commons-cli:commons-cli:1.4'

    // For Java 9+ compatibility, we include a bundled version of the libreoffice libraries
    // See https://bugs.documentfoundation.org/show_bug.cgi?id=117331#c8 for background information
    // Use the task bundleLibreOffice to update the bundled jar
    //compile "org.libreoffice:juh:6.2.3"
    //compile "org.libreoffice:jurt:6.2.3"
    //compile "org.libreoffice:ridl:6.2.3"
    //compile "org.libreoffice:unoil:6.2.3"

    compile 'io.github.java-diff-utils:java-diff-utils:4.0'
    compile 'info.debatty:java-string-similarity:1.2.1'

    antlr3 'org.antlr:antlr:3.5.2'
    compile 'org.antlr:antlr-runtime:3.5.2'

    antlr4 'org.antlr:antlr4:4.7.2'
    compile 'org.antlr:antlr4-runtime:4.7.2'

    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.4.4'

    compile 'org.postgresql:postgresql:42.2.8'

    compile ('com.google.guava:guava:28.1-jre') {
        // TODO: Remove this as soon as https://github.com/google/guava/issues/2960 is fixed
        exclude module: "jsr305"
    }

    compile group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '1.3.5'

    // JavaFX stuff
    compile 'de.jensd:fontawesomefx-commons:11.0'
    compile 'de.jensd:fontawesomefx-materialdesignfont:1.7.22-11'
    compile 'de.saxsys:mvvmfx-validation:1.9.0-SNAPSHOT'
    compile 'de.saxsys:mvvmfx:1.8.0'
    compile 'org.fxmisc.easybind:easybind:1.0.3'
    compile 'org.fxmisc.flowless:flowless:0.6.1'
    compile 'org.fxmisc.richtext:richtextfx:0.10.2'
    compile group: 'org.glassfish.hk2.external', name: 'jakarta.inject', version: '2.6.1'
    compile 'com.jfoenix:jfoenix:9.0.9'
    compile 'org.controlsfx:controlsfx:11.0.0'

    compile 'org.jsoup:jsoup:1.12.1'
    compile 'com.mashape.unirest:unirest-java:1.4.9'

    compile 'org.slf4j:slf4j-api:2.0.0-alpha0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '3.0.0-20190915.182410-364'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl', version: '3.0.0-20190915.182922-250'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '3.0.0-20190915.182113-372'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '3.0.0-20190915.182215-368'
    annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-core', version: '3.0.0-20190915.182215-368'

    compile 'de.undercouch:citeproc-java:1.0.1'

    compile group: 'jakarta.activation', name: 'jakarta.activation-api', version: '1.2.1'
    compile group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.2'
    compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.2'

    compile ('com.github.tomtung:latex2unicode_2.12:0.2.6') {
        exclude module: 'fastparse_2.12'
    }

    /*
    TODO: Reenable error prone as soon as https://github.com/google/error-prone/issues/1210 is fixed
    errorprone ('com.google.errorprone:error_prone_core:2.3.2') {
        exclude module: "jsr305"
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotation'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'com.google.errorprone', module: 'error_prone_check_api'
    }
    */

    compile group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '2.4.1'
    compile (group: 'com.microsoft.azure', name: 'applicationinsights-logging-log4j2', version: '2.4.1') {
        exclude module: "log4j-core"
    }

    testCompile 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.5.2'
    testCompile 'org.junit.platform:junit-platform-launcher:1.5.2'

    testCompile 'net.bytebuddy:byte-buddy-parent:1.10.1'
    testRuntime group: 'org.apache.logging.log4j', name: 'log4j-core', version: '3.0.0-20190915.182215-368'
    testRuntime group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '3.0.0-20190915.182552-364'
    testCompile 'org.mockito:mockito-core:3.0.0'
    //testCompile 'com.github.tomakehurst:wiremock:2.24.1'
    testCompile ('org.reflections:reflections:0.9.11') {
        exclude module: "jsr305"
    }
    testCompile 'org.xmlunit:xmlunit-core:2.6.3'
    testCompile 'org.xmlunit:xmlunit-matchers:2.6.3'
    testCompile 'com.tngtech.archunit:archunit-junit5-api:0.11.0'
    //testRuntime 'com.tngtech.archunit:archunit-junit5-engine:0.11.0'
    testCompile 'com.tngtech.archunit:archunit-junit5-api:0.11.0'
    testCompile "org.testfx:testfx-core:4.0.15-alpha"
    testCompile "org.testfx:testfx-junit5:4.0.15-alpha"

    checkstyle 'com.puppycrawl.tools:checkstyle:8.25'
    xjc group: 'org.glassfish.jaxb', name: 'jaxb-xjc', version: '2.3.2'
    jython 'org.python:jython-standalone:2.7.1'
}

jacoco {
    toolVersion = '0.8.3'
}

dependencyUpdates {
    outputFormatter = "json"
}

// We have some dependencies which cannot be updated due to various reasons.
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'snapshot', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
        rules.withModule("com.github.tomtung:latex2unicode_2.12") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /0.2.*/) {
                // Reject version higher than 2.0.2. see https://github.com/JabRef/jabref/pull/3781
                selection.reject("Cannot be updated to 0.2.4 until JabRef is prepared for it")
            }
        }
        rules.withModule("com.github.johnrengelman.shadow:com.github.johnrengelman.shadow.gradle.plugin") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /4.*/) {
                selection.reject("Version 4.X breaks the release process.")
            }
        }
        rules.withModule("com.google.errorprone:error_prone_core") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /2.3.3/) {
                selection.reject("Does not work due to bug https://github.com/google/error-prone/issues/1240")
            }
        }
    }
}

task checkOutdatedDependencies(dependsOn: dependencyUpdates) {
    doLast {
        def dependencyReport = new JsonSlurper().parseText(new File("build/dependencyUpdates/report.json").text)
        assert dependencyReport.outdated.count == 0: "There are outdated dependencies in build.gradle!\n Run ./gradlew dependencyUpdates to see which"
    }
}

clean {
    delete "src/main/gen"
}

processResources {
    filteringCharset = 'UTF-8'

    filesMatching("build.properties") {
        expand(version: createVersionString(),
                "year": String.valueOf(Calendar.getInstance().get(Calendar.YEAR)),
                "authors": new File('AUTHORS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "developers": new File('DEVELOPERS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "azureInstrumentationKey": System.getenv('AzureInstrumentationKey'),
                "minRequiredJavaVersion": minRequiredJavaVersion,
                "allowJava9": allowJava9

        )
        filteringCharset = 'UTF-8'
    }

    filesMatching("resource/**/meta.xml") {
        expand version: project.version
    }
}


task generateSource(dependsOn: ["generateBstGrammarSource",
                                "generateSearchGrammarSource",
                                "generateMedlineSource",
                                "generateBibtexmlSource",
                                "generateEndnoteSource",
                                "generateModsSource"]) {
    group = 'JabRef'
    description 'Generates all Java source files.'
}

task generateBstGrammarSource(type: org.jabref.build.antlr.AntlrTask) {
    group = "JabRef"
    description = 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.'

    antlr = ANTLR3
    inputFile = 'src/main/antlr3/org/jabref/bst/Bst.g'
    outputDir = 'src/main/gen/org/jabref/logic/bst/'
}

task generateSearchGrammarSource(type: org.jabref.build.antlr.AntlrTask) {
    group = 'JabRef'
    description = "Generates java files for Search.g antlr4."

    antlr = ANTLR4
    inputFile = "src/main/antlr4/org/jabref/search/Search.g4"
    outputDir = "src/main/gen/org/jabref/search"
    javaPackage = "org.jabref.search"
}

task generateMedlineSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the medline importer."

    schemaFile = "src/main/resources/xjc/medline/medline.xsd"
    outputDirectory = "src/main/gen/"
    javaPackage = "org.jabref.logic.importer.fileformat.medline"
}

task generateBibtexmlSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the bibtexml importer."

    schemaFile = "src/main/resources/xjc/bibtexml/bibtexml.xsd"
    outputDirectory = "src/main/gen"
    javaPackage = "org.jabref.logic.importer.fileformat.bibtexml"
}

task generateEndnoteSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the endnote importer."

    schemaFile = "src/main/resources/xjc/endnote/endnote.xsd"
    outputDirectory = "src/main/gen/"
    javaPackage = "org.jabref.logic.importer.fileformat.endnote"
}

task generateModsSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the mods importer."

    schemaFile = "src/main/resources/xjc/mods/mods-3-7.xsd"
    bindingFile = "src/main/resources/xjc/mods/mods-binding.xjb"
    outputDirectory = "src/main/gen/"
    javaPackage = "org.jabref.logic.importer.fileformat.mods"
    arguments = '-npa'
}

tasks.withType(JavaCompile) {
    // use UTF-8
    options.encoding = 'UTF-8'
}

compileJava {
    options.compilerArgs << "-Xlint:none"
    dependsOn "generateSource"

    moduleOptions {
        // TODO: Remove access to internal api
        addExports = [
                'javafx.controls/com.sun.javafx.scene.control' : 'org.jabref',
                'org.controlsfx.controls/impl.org.controlsfx.skin' : 'org.jabref'
        ]
    }
}

run {
    // TODO: Remove access to internal api
    jvmArgs '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=org.jabref',
            '--add-exports', 'org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref',
            '--add-opens', 'javafx.controls/javafx.scene.control=org.jabref',
            '--add-opens', 'org.controlsfx.controls/org.controlsfx.control.textfield=org.jabref',
            '--add-opens', 'javafx.controls/com.sun.javafx.scene.control=org.jabref',
            // Not sure why we need to restate the controlfx exports
            // Taken from here: https://github.com/controlsfx/controlsfx/blob/9.0.0/build.gradle#L1
            "--add-exports", "javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls",
            "--add-exports", "javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls",
            "--add-exports", "javafx.graphics/com.sun.javafx.css=org.controlsfx.controls",
            "--add-exports", "javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls",
            "--add-exports", "javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls",
            "--add-exports", "javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls",
            "--add-exports", "javafx.base/com.sun.javafx.event=org.controlsfx.controls",
            "--add-exports", "javafx.base/com.sun.javafx.collections=org.controlsfx.controls",
            "--add-exports", "javafx.base/com.sun.javafx.runtime=org.controlsfx.controls",
            "--add-exports", "javafx.web/com.sun.webkit=org.controlsfx.controls",
            "--add-exports", "javafx.graphics/com.sun.javafx.css=org.controlsfx.controls",
            "--add-opens", "javafx.controls/javafx.scene.control.skin=org.controlsfx.controls",
            "--add-opens", "javafx.graphics/javafx.scene=org.controlsfx.controls",
            "--add-exports", "javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
            "--add-opens", "javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
            "--add-opens", "javafx.base/com.sun.javafx.binding=com.jfoenix",
            "--add-opens", "javafx.graphics/com.sun.javafx.stage=com.jfoenix",
            "--add-opens", "javafx.base/com.sun.javafx.event=com.jfoenix"

    // TODO: The following code should have the same affect as the above one, but doesn't work for some reason
    // https://github.com/java9-modularity/gradle-modules-plugin/issues/89
    moduleOptions {
        addExports = [
                'javafx.controls/com.sun.javafx.scene.control' : 'org.jabref',
                'org.controlsfx.controls/impl.org.controlsfx.skin' : 'org.jabref'
        ]

        addOpens = [
                'javafx.controls/javafx.scene.control' : 'org.jabref',
                'org.controlsfx.controls/org.controlsfx.control.textfield' : 'org.jabref'
        ]
    }
}

javadoc {
    options {
        encoding = 'UTF-8'
        version = true
        author = true
    }
}

localization.script = 'scripts/syncLang.py'

// Test tasks
test {
    useJUnitPlatform {
        excludeTags 'DatabaseTest', 'FetcherTest', 'GUITest', 'org.jabref.testutils.category.FetcherTest', 'org.jabref.testutils.category.GUITest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "full"
    }
}

task databaseTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.DatabaseTest'
    }
}

task fetcherTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.FetcherTest'
    }
}

task guiTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.GUITest'
    }
}

// Test result tasks
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    jacoco {
        append = true
    }
}

task jacocoMerge(type: JacocoMerge) {
    executionData file("$buildDir/jacoco/test.exec"), file("$buildDir/jacoco/databaseTest.exec"), file("$buildDir/jacoco/fetcherTest.exec")
    dependsOn test, databaseTest, fetcherTest
}

jacocoTestReport {
    executionData jacocoMerge.destinationFile
    dependsOn jacocoMerge

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// Code quality tasks
checkstyle {
    // will only run when called explicitly from the command line
    sourceSets = []
}

modernizer {
    // We have more than 20 issues, which are not fixed yet. Nevertheless, we produce the modernizer output.
    // See https://github.com/andrewgaul/modernizer-maven-plugin for more information on modernizer
    failOnViolations = false
}

// Release tasks
task generateFinalJabRefPS1File(type: Copy) {
    from('buildres') {
        include 'JabRef.ps1'
    }
    into 'build'
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [jabRefJarFileName: jar.archiveName])
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'JabRef'
    }

    addOptions("--bind-services")

    // TODO: Remove the following as soon as the dependencies are fixed (upstream)
    // forceMerge is usually needed when some non-modular artifacts in the dependency graph use code that was previously part of the JDK
    // but it was removed in the newer releases.
    // The pom.xml associated with such a non-modular artifact does not mention that the artifact depends on the removed code
    // (because the artifact was published when this code was still available in the JDK).
    forceMerge "javafx"
    forceMerge "controlsfx", "bcprov", "jaxb", "istack", "stax", "log4j"

    // TODO: Remove the following correction to the merged module
    // The module descriptor automatically generated by the plugin for the merged module contained some invalid entries.
    // Execute ./gradlew suggestMergedModuleInfo and include the incorrect directives here.
    mergedModule {
        requires 'java.logging'
        requires 'jdk.xml.dom'
        requires 'java.sql'
        requires 'java.rmi'
        requires 'java.xml'
        requires 'com.sun.xml.txw2'
        requires 'java.desktop'
        requires 'java.security.jgss'
        requires 'jdk.jsobject'
        requires 'jdk.unsupported'
        requires 'java.management'
        requires 'java.naming'
        requires 'jdk.unsupported.desktop'
        requires 'java.security.sasl'
        requires 'java.scripting'
        requires 'java.datatransfer'
        requires 'java.compiler'
        requires 'java.transaction.xa'
        requires 'com.sun.xml.fastinfoset'
        requires 'org.slf4j'
        uses 'com.airhacks.afterburner.injection.PresenterFactory'
        uses 'org.controlsfx.glyphfont.GlyphFont'
        uses 'com.airhacks.afterburner.views.ResourceLocator'
        provides 'java.sql.Driver' with 'org.postgresql.Driver'
        provides 'org.controlsfx.glyphfont.GlyphFont' with 'org.controlsfx.glyphfont.FontAwesome'
        provides 'org.apache.commons.logging.LogFactory' with 'org.apache.logging.log4j.jcl.LogFactoryImpl'
        provides 'org.slf4j.spi.SLF4JServiceProvider' with 'org.apache.logging.slf4j.SLF4JServiceProvider'
        provides 'com.microsoft.applicationinsights.core.dependencies.io.grpc.ServerProvider' with 'com.microsoft.applicationinsights.core.dependencies.io.grpc.netty.shaded.io.grpc.netty.NettyServerProvider'
        provides 'com.microsoft.applicationinsights.core.dependencies.io.grpc.NameResolverProvider' with 'com.microsoft.applicationinsights.core.dependencies.io.grpc.internal.DnsNameResolverProvider'
        provides 'java.security.Provider' with 'org.bouncycastle.jce.provider.BouncyCastleProvider', 'org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider'
        provides 'com.microsoft.applicationinsights.core.dependencies.io.grpc.ManagedChannelProvider' with 'com.microsoft.applicationinsights.core.dependencies.io.grpc.netty.shaded.io.grpc.netty.NettyChannelProvider'
    }

    jpackage {
        // In order for this to work, you need to dowload jpackage from https://jdk.java.net/jpackage/
        // and put the path to the jdk-14 folder in the environment variable BADASS_JLINK_JPACKAGE_HOME
        outputDir = "distribution"

        if (OperatingSystem.current().isWindows()) {
            // This requires WiX to be installed: https://github.com/wixtoolset/wix3/releases
            installerType = "msi"
            imageOptions = [
                    '--win-console',
                    '--icon', "${projectDir}/src/main/resources/icons/jabref.ico",
            ]
            installerOptions = [
                    '--vendor', 'JabRef',
                    '--app-version', "${project.version}",
                    '--win-dir-chooser',
                    '--win-shortcut'
            ]
        }

        if (OperatingSystem.current().isLinux()) {
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/JabRef-icon-64.png",
            ]
            installerOptions = [
                    '--vendor', 'JabRef',
                    '--app-version', "${project.version}"
            ]
        }

        if (OperatingSystem.current().isMacOsX()) {
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/jabref.icns",
            ]
            installerOptions = [
                    '--vendor', 'JabRef',
                    '--app-version', "${project.version}"
            ]
        }
    }
}

jmh {
    warmupIterations = 5
    iterations = 10
    fork = 2
}

// Source: https://stackoverflow.com/a/44168582/873282
task downloadDependencies {
    description "Pre-downloads *most* dependencies"
    doLast {
        configurations.getAsMap().each { name, config ->
            println "Retrieving dependencies for $name"
            try {
                config.files
            } catch (e) {
                // some cannot be resolved, just log them
                project.logger.info e.message
            }
        }
    }
}

task bundleLibreOffice(type: Jar) {
    from configurations.libreoffice.collect { zipTree it }

    manifest {
        attributes 'Automatic-Module-Name': 'org.jabref.thirdparty.libreoffice'
    }

    destinationDir = file('lib')
    archiveName = 'libreoffice.jar'
}

// Returns the value of project.version in production and a string of the format VERSION-dev--DATE--BRANCH--GIT_HASH for development versions
def createVersionString() {
    if (hasProperty('dev')) {
        String command = "git log --pretty=format:%cd--%h -n 1 --date=short"
        String commitInfo
        if (OperatingSystem.current().isWindows()) {
            commitInfo = "cmd /c $command".execute().in.text
        } else {
            commitInfo = command.execute().in.text
        }

        // determine branch
        command = "git symbolic-ref -q --short HEAD"
        String branchName
        if (OperatingSystem.current().isWindows()) {
            branchName = "cmd /c $command".execute().in.text
        } else {
            branchName = command.execute().in.text
        }
        // A newline is returned. Remove it. (trim())
        // In the context of github, the branch name could be something like "pull/277"
        // "/" is an illegal character. To be safe, all illegal filename characters are replaced by "_"
        // http://stackoverflow.com/a/15075907/873282 describes the used pattern.
        branchName = branchName.trim().replaceAll("[^a-zA-Z0-9.-]", "_")

        // first the date (%cd), then the branch name, and finally the commit id (%h)
        return project.version + "-dev--" + commitInfo.substring(0, 10) + "--" + branchName + "--" + commitInfo.substring(12)
    } else {
        return project.version
    }
}
