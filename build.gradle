import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem
import org.jabref.build.xjc.XjcTask

// to update the gradle wrapper, execute
// ./gradlew wrapper --gradle-version=4.4.1 --distribution-type=bin

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.3'
    id 'com.install4j.gradle' version '7.0.12'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id "com.simonharrer.modernizer" version '1.6.0-1'
    id 'me.champeau.gradle.jmh' version '0.4.8'
    id 'net.ltgt.errorprone' version '0.8.1'
    id 'com.github.ben-manes.versions' version '0.21.0'
}

// use the gradle build scan feature: https://scans.gradle.com/get-started
buildScan { termsOfServiceUrl = 'https://gradle.com/terms-of-service'; termsOfServiceAgree = 'yes' }


apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'project-report'
apply plugin: 'jacoco'
apply plugin: 'install4j'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'checkstyle'
apply plugin: org.jabref.build.antlr.AntlrPlugin
apply plugin: org.jabref.build.xjc.XjcPlugin
apply plugin: org.jabref.build.localization.LocalizationPlugin

apply from: 'eclipse.gradle'

group = "org.jabref"
version = "5.0-dev"
project.ext.threeDotVersion = "5.0.0.0"
project.ext.install4jDir = hasProperty("install4jDir") ? getProperty("install4jDir") : (OperatingSystem.current().isWindows() ? 'C:/Program Files/install4j7' : 'install4j7')
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "org.jabref.JabRefMain"

// These are the Java version requirements we will check on each start of JabRef
ext.minRequiredJavaVersion = "1.8.0_171"
ext.allowJava9 = false

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/gen"]
        }

        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

configurations {
    errorprone
}

dependencies {
    // Include all jar-files in the 'lib' folder as dependencies
    compile fileTree(dir: 'lib', includes: ['*.jar'])

    compile 'org.apache.pdfbox:pdfbox:2.0.16'
    compile 'org.apache.pdfbox:fontbox:2.0.16'
    compile 'org.apache.pdfbox:xmpbox:2.0.16'

    compile group: 'org.apache.tika', name: 'tika-core', version: '1.21'

    // required for reading write-protected PDFs - see https://github.com/JabRef/jabref/pull/942#issuecomment-209252635
    compile 'org.bouncycastle:bcprov-jdk15on:1.62'

    compile 'commons-cli:commons-cli:1.4'

    compile "org.libreoffice:juh:6.2.3"
    compile "org.libreoffice:jurt:6.2.3"
    compile "org.libreoffice:ridl:6.2.3"
    compile "org.libreoffice:unoil:6.2.3"

    compile 'io.github.java-diff-utils:java-diff-utils:4.0'
    compile 'info.debatty:java-string-similarity:1.2.1'

    antlr3 'org.antlr:antlr:3.5.2'
    compile 'org.antlr:antlr-runtime:3.5.2'

    antlr4 'org.antlr:antlr4:4.7.2'
    compile 'org.antlr:antlr4-runtime:4.7.2'

    compile 'mysql:mysql-connector-java:8.0.17'

    compile 'org.postgresql:postgresql:42.2.6'

    compile 'net.java.dev.glazedlists:glazedlists_java15:1.9.1'

    compile 'com.google.guava:guava:28.0-jre'

    // JavaFX stuff
    compile 'de.jensd:fontawesomefx-commons:8.15'
    compile 'de.jensd:fontawesomefx-materialdesignfont:1.7.22-4'
    compile 'de.saxsys:mvvmfx-validation:1.8.0'
    compile 'de.saxsys:mvvmfx:1.8.0'
    compile 'org.fxmisc.easybind:easybind:1.0.3'
    compile 'org.fxmisc.flowless:flowless:0.6.1'
    compile 'org.fxmisc.richtext:richtextfx:0.10.1'
    compile 'com.sibvisions.external.jvxfx:dndtabpane:0.1'
    compile 'javax.inject:javax.inject:1'
    compile 'com.jfoenix:jfoenix:8.0.9'

    // Cannot be updated to 9.*.* until Jabref works with Java 9
    compile 'org.controlsfx:controlsfx:8.40.16-SNAPSHOT'

    compile 'org.jsoup:jsoup:1.12.1'
    compile 'com.mashape.unirest:unirest-java:1.4.9'

    // >1.8.0-beta is required for java 9 compatibility
    compile 'org.slf4j:slf4j-api:2.0.0-alpha0'
    compile 'org.apache.logging.log4j:log4j-slf4j18-impl:2.12.0'
    compile 'org.apache.logging.log4j:log4j-jcl:2.12.0'
    compile 'org.apache.logging.log4j:log4j-api:2.12.0'
    compile 'org.apache.logging.log4j:log4j-core:2.12.0'

    compile 'de.undercouch:citeproc-java:1.0.1'

    compile 'com.github.tomtung:latex2unicode_2.12:0.2.2'

    errorproneJavac 'com.google.errorprone:javac:1.8.0-u20'

    compile group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '2.4.0'
    compile group: 'com.microsoft.azure', name: 'applicationinsights-logging-log4j2', version: '2.4.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.1'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.5.1'
    testCompile 'org.junit.platform:junit-platform-launcher:1.5.1'

    testRuntime 'org.apache.logging.log4j:log4j-core:2.12.0'
    testRuntime 'org.apache.logging.log4j:log4j-jul:2.12.0'
    testCompile 'org.mockito:mockito-core:3.0.0'
    testCompile 'com.github.tomakehurst:wiremock:2.24.0'
    testCompile 'org.reflections:reflections:0.9.11'
    testCompile 'org.xmlunit:xmlunit-core:2.6.3'
    testCompile 'org.xmlunit:xmlunit-matchers:2.6.3'
    testRuntime 'com.tngtech.archunit:archunit-junit5-engine:0.10.2'
    testCompile 'com.tngtech.archunit:archunit-junit5-api:0.10.2'
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit5:4.0.+"

    checkstyle 'com.puppycrawl.tools:checkstyle:8.22'
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.4-1'
    jython 'org.python:jython-standalone:2.7.1'
}

jacoco {
    toolVersion = '0.8.1'
}

dependencyUpdates {
    outputFormatter = "json"
}

// We have some dependencies which cannot be updated due to various reasons.
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            if (selection.candidate.version ==~ /[0-9].*SNAPSHOT/) {
                selection.reject("Ignore SNAPSHOT releases")
            }
        }
        rules.withModule("org.controlsfx:controlsfx") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /9.*/) { // Reject version 9 or higher
                selection.reject("Cannot be updated to 9.*.* until Jabref works with Java 9")
            }
        }
        rules.withModule("com.github.tomtung:latex2unicode_2.12") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /0.2.[3,4]/) {
                // Reject version higher than 2.0.2. see https://github.com/JabRef/jabref/pull/3781
                selection.reject("Cannot be updated to 0.2.4 until JabRef is prepared for it")
            }
        }
        rules.withModule("com.github.johnrengelman.shadow:com.github.johnrengelman.shadow.gradle.plugin") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /4.*/) {
                selection.reject("Version 4.X breaks the release process.")
            }
        }
        rules.withModule("de.jensd:fontawesomefx-materialdesignfont") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /2.*/) {
                selection.reject("Cannot be upgraded to version 2")
            }
        }
        rules.withModule("com.jfoenix:jfoenix") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /9.*/) { // Reject version 9 or higher
                selection.reject("Cannot be updated to 9.*.* until Jabref works with Java 9")
            }
        }
        rules.withModule("com.google.errorprone:javac") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /1.9.*/ || selection.candidate.version ==~ /9.*/) {
                selection.reject("Cannot be updated to 9.*.* until Jabref works with Java 9")
            }
        }
        rules.withModule("com.sun.xml.bind:jaxb-xjc") { ComponentSelection selection ->
            if (!(selection.candidate.version ==~ /2.2.4.*/) || selection.candidate.version ==~ /2.[3-9].*/) {
                selection.reject("Cannot be updated to 2.2.5 or higher.")
            }
        }
    }
}

task checkOutdatedDependencies(dependsOn: dependencyUpdates) {
    doLast {
        def dependencyReport = new JsonSlurper().parseText(new File("build/dependencyUpdates/report.json").text)
        assert dependencyReport.outdated.count == 0: "There are outdated dependencies in build.gradle!\n Run ./gradlew dependencyUpdates to see which"
    }
}

clean {
    delete "src/main/gen"
}

processResources {
    filteringCharset = 'UTF-8'

    filesMatching("build.properties") {
        expand(version: project.version,
                "year": String.valueOf(Calendar.getInstance().get(Calendar.YEAR)),
                "authors": new File('AUTHORS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "developers": new File('DEVELOPERS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "azureInstrumentationKey": System.getenv('AzureInstrumentationKey'),
                "minRequiredJavaVersion": minRequiredJavaVersion,
                "allowJava9": allowJava9

        )
        filteringCharset = 'UTF-8'
    }

    filesMatching("resource/**/meta.xml") {
        expand version: project.version
    }
}


task generateSource(dependsOn: ["generateBstGrammarSource",
                                "generateSearchGrammarSource",
                                "generateMedlineSource",
                                "generateBibtexmlSource",
                                "generateEndnoteSource",
                                "generateModsSource"]) {
    group = 'JabRef'
    description 'Generates all Java source files.'
}

task generateBstGrammarSource(type: org.jabref.build.antlr.AntlrTask) {
    group = "JabRef"
    description = 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.'

    antlr = ANTLR3
    inputFile = 'src/main/antlr3/org/jabref/bst/Bst.g'
    outputDir = 'src/main/gen/org/jabref/logic/bst/'
}

task generateSearchGrammarSource(type: org.jabref.build.antlr.AntlrTask) {
    group = 'JabRef'
    description = "Generates java files for Search.g antlr4."

    antlr = ANTLR4
    inputFile = "src/main/antlr4/org/jabref/search/Search.g4"
    outputDir = "src/main/gen/org/jabref/search"
    javaPackage = "org.jabref.search"
}

task generateMedlineSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the medline importer."

    schemaFile = "src/main/resources/xjc/medline/medline.xsd"
    outputDirectory = "src/main/gen/"
    javaPackage = "org.jabref.logic.importer.fileformat.medline"
}

task generateBibtexmlSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the bibtexml importer."

    schemaFile = "src/main/resources/xjc/bibtexml/bibtexml.xsd"
    outputDirectory = "src/main/gen"
    javaPackage = "org.jabref.logic.importer.fileformat.bibtexml"
}

task generateEndnoteSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the endnote importer."

    schemaFile = "src/main/resources/xjc/endnote/RSXML.dtd"
    outputDirectory = "src/main/gen/"
    javaPackage = "org.jabref.logic.importer.fileformat.endnote"
    arguments = '-dtd'
}

task generateModsSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the mods importer."

    schemaFile = "src/main/resources/xjc/mods/mods-3-7.xsd"
    bindingFile = "src/main/resources/xjc/mods/mods-binding.xjb"
    outputDirectory = "src/main/gen/"
    javaPackage = "org.jabref.logic.importer.fileformat.mods"
    arguments = '-npa'
}

tasks.withType(JavaCompile) {
    // use UTF-8
    options.encoding = 'UTF-8'

    // ignore annotation processor from log4j2
    options.compilerArgs += '-proc:none'
}

compileJava {
    options.compilerArgs << "-Xlint:none"
    dependsOn "generateSource"
}

javadoc {
    options {
        encoding = 'UTF-8'
        version = true
        author = true
    }
}

localization.script = 'scripts/syncLang.py'

// Test tasks
test {
    useJUnitPlatform {
        excludeTags 'DatabaseTest', 'FetcherTest', 'GUITest', 'org.jabref.testutils.category.FetcherTest', 'org.jabref.testutils.category.GUITest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "full"
    }
}

task databaseTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.DatabaseTest'
    }
}

task fetcherTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.FetcherTest'
    }
}

task guiTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.GUITest'
    }
}

// Test result tasks
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    jacoco {
        append = true
    }
}

task jacocoMerge(type: JacocoMerge) {
    executionData file("$buildDir/jacoco/test.exec"), file("$buildDir/jacoco/databaseTest.exec"), file("$buildDir/jacoco/fetcherTest.exec")
    dependsOn test, databaseTest, fetcherTest
}

jacocoTestReport {
    executionData jacocoMerge.destinationFile
    dependsOn jacocoMerge

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// Code quality tasks
checkstyle {

}

modernizer {
    // We have more than 20 issues, which are not fixed yet. Nevertheless, we produce the modernizer output.
    // See https://github.com/andrewgaul/modernizer-maven-plugin for more information on modernizer
    failOnViolations = false
}

// Release tasks
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
    classifier 'fat'
}

/*
 * Changes project.version to VERSION--snapshot--DATE--GIT_HASH
 */
if (hasProperty('dev')) {
    String command = "git log --pretty=format:%cd--%h -n 1 --date=short"
    String commitInfo = ""
    if (OperatingSystem.current().isWindows()) {
        commitInfo = "cmd /c $command".execute().in.text
    } else {
        commitInfo = command.execute().in.text
    }

    // determine branch
    command = "git symbolic-ref -q --short HEAD"
    String branchName = ""
    if (OperatingSystem.current().isWindows()) {
        branchName = "cmd /c $command".execute().in.text
    } else {
        branchName = command.execute().in.text
    }
    // A newline is returned. Remove it. (trim())
    // In the context of github, the branch name could be something like "pull/277"
    // "/" is an illegal character. To be safe, all illegal filename characters are replaced by "_"
    // http://stackoverflow.com/a/15075907/873282 describes the used pattern.
    branchName = branchName.trim().replaceAll("[^a-zA-Z0-9.-]", "_")

    // hack string
    // first the date (%cd), then the branch name, and finally the commit id (%h)
    String infoString = commitInfo.substring(0, 10) + "--" + branchName + "--" + commitInfo.substring(12)

    project.version += "--snapshot--" + infoString
}

install4j {
    installDir = file(project.ext.install4jDir)
}

task generateFinalJabRefPS1File(type: Copy) {
    from('buildres') {
        include 'JabRef.ps1'
    }
    into 'build'
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [jabRefJarFileName: jar.archiveName])
}

// has to be defined AFTER 'dev' things to have the correct project.version
task media(type: com.install4j.gradle.Install4jTask, dependsOn: ["releaseJar", "generateFinalJabRefPS1File"]) {
    projectFile = file('jabref.install4j')
    release = project.version
    winKeystorePassword = System.getenv('CERTIFICATE_PW')
    macKeystorePassword = System.getenv('CERTIFICATE_PW')
    variables = [
            versionFourDots: project.ext.threeDotVersion,
            buildFileName  : jar.archiveName,
            version        : project.version
    ]

    doLast {
        copy {
            from "build/install4j"
            into "build/releases"
        }
    }
}


task release(dependsOn: ["media", "releaseJar"]) {
    group = 'JabRef - Release'
    description 'Creates a release for all target platforms.'
}

task releaseJar(dependsOn: "shadowJar") {
    group = 'JabRef - Release'
    description "Creates a Jar release."
    doLast {
        copy {
            from("$buildDir/libs/JabRef-${project.version}-fat.jar")
            into("$buildDir/releases")
            rename { String fileName ->
                fileName.replace('-fat', '')
            }
        }
        // set executable with read permissions (first true) and for all (false)
        file("$buildDir/releases/JabRef-${project.version}.jar").setExecutable(true, false)
    }
}

task snapJar(dependsOn: "releaseJar", type: Delete) {
    delete fileTree(dir: "$buildDir/releases/", exclude: "JabRef-${project.version}.jar")
}

jmh {
    warmupIterations = 5
    iterations = 10
    fork = 2
}

// Source: https://stackoverflow.com/a/44168582/873282
task downloadDependencies {
    description "Pre-downloads *most* dependencies"
    doLast {
        configurations.getAsMap().each { name, config ->
            println "Retrieving dependencies for $name"
            try {
                config.files
            } catch (e) {
                // some cannot be resolved, just log them
                project.logger.info e.message
            }
        }
    }
}
