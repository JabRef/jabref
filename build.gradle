import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0-M1'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.11'

    id 'nebula.lint' version '8.3.1'
    id 'nebula.info' version '3.6.0'

    id 'com.install4j.gradle' version '7.0.4'

    id 'me.champeau.gradle.jmh' version '0.4.3'
    id 'net.ltgt.errorprone' version '0.0.13'
    id 'com.github.ben-manes.versions' version '0.17.0'
}

apply plugin: 'install4j'

String plainVersion = "4.2-dev"
project.ext.threeDotVersion = "4.1.0.1"
project.ext.install4jDir = hasProperty("install4jDir") ? getProperty("install4jDir") : (org.gradle.internal.os.OperatingSystem.current().isWindows() ? 'C:/Program Files/install4j7' : 'install4j7')

/*
 * Set version to VERSION--snapshot--DATE--GIT_HASH
 */
String versionAppendix
if (project.hasProperty('dev')) {
    String command = "git log --pretty=format:%cd--%h -n 1 --date=short"
    String commitInfo = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        commitInfo = "cmd /c $command".execute().in.text
    } else {
        commitInfo = command.execute().in.text
    }

    // determine branch
    command = "git symbolic-ref -q --short HEAD"
    String branchName = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        branchName = "cmd /c $command".execute().in.text
    } else {
        branchName = command.execute().in.text
    }
    // A newline is returned. Remove it. (trim())
    // In the context of github, the branch name could be something like "pull/277"
    // "/" is an illegal character. To be safe, all illegal filename characters are replaced by "_"
    // http://stackoverflow.com/a/15075907/873282 describes the used pattern.
    branchName = branchName.trim().replaceAll("[^a-zA-Z0-9.-]", "_")

    // hack string
    // first the date (%cd), then the branch name, and finally the commit id (%h)
    String infoString = commitInfo.substring(0, 10) + "--" + branchName + "--" + commitInfo.substring(12)

    versionAppendix = "--snapshot--" + infoString
} else {
    versionAppendix = ""
}

// enable buildscan providing insights to our build (speed, ...)
// see https://gradle.com/build-scans for more information
buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }

allprojects {
    group = "org.jabref"
    version = plainVersion + versionAppendix

    // These are the Java version requirements we will check on each start of JabRef
    ext.minRequiredJavaVersion = "1.8.0_144"
    ext.allowJava9 = false

    apply plugin: 'java'
    apply plugin: 'checkstyle'

    apply plugin: 'me.champeau.gradle.jmh'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'
    apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }

    // linter for gradle - documentation: https://github.com/nebula-plugins/gradle-lint-plugin/wiki
    apply plugin: 'nebula.lint'
    gradleLint.rules = ['all-dependency']

    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:8.8'

        testCompile 'junit:junit:4.12'
        testCompile 'org.junit.platform:junit-platform-commons:1.1.0-M2'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0-M2'
        testCompile 'org.junit.jupiter:junit-jupiter-params:5.1.0-M2'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0-M2'
        testRuntime 'org.junit.vintage:junit-vintage-engine:5.1.0-M2'
        testRuntime 'org.apache.logging.log4j:log4j-core:2.10.0'
        testRuntime 'org.apache.logging.log4j:log4j-jul:2.10.0'
        testCompile 'org.mockito:mockito-core:2.13.0'
        testCompile 'org.hamcrest:hamcrest-core:1.3'
    }

    // Code quality tasks
    checkstyle {
        // do not use other packages for checkstyle, excluding gen(erated) sources
        checkstyleMain.source = "src/main/java"
        toolVersion = '8.5'
    }

    checkstyleMain.shouldRunAfter test
    checkstyleTest.shouldRunAfter test

    jmh {
        warmupIterations = 5
        iterations = 10
        fork = 2
    }

    dependencyUpdates {
        outputFormatter = "json"
    }

    task checkOutdatedDependencies(dependsOn: dependencyUpdates) {
        doLast {
            def dependencyReport = new JsonSlurper().parseText(new File("build/dependencyUpdates/report.json").text)
            assert dependencyReport.outdated.count == 0: "There are outdated dependencies in build.gradle!\n Run ./gradlew dependencyUpdates to see which"
        }
    }

    // We have some dependencies which cannot be updated due to various reasons.
    dependencyUpdates.resolutionStrategy = {
        componentSelection {
            withModule("org.controlsfx:controlsfx") { ComponentSelection selection ->
                if (selection.candidate.version ==~ /9.*/) { // Reject version 9 or higher
                    selection.reject("Cannot be updated to 9.*.* until Jabref works with Java 9")
                }
            }
            withModule("com.microsoft.azure:applicationinsights-core") { ComponentSelection selection ->
                if (selection.candidate.version.equals("1.0.10")) {
                    selection.reject("Version 1.0.10 is broken... waiting for 1.0.11")
                }
            }
            withModule("com.microsoft.azure:applicationinsights-logging-log4j2") { ComponentSelection selection ->
                if (selection.candidate.version.equals("1.0.10")) {
                    selection.reject("Version 1.0.10 is broken... waiting for 1.0.11")
                }
            }
            withModule("com.microsoft.azure:applicationinsights-core") { ComponentSelection selection ->
                if (selection.candidate.version.equals("2.0.0-BETA")) {
                    selection.reject("Version 2.0.0-BETA is broken... waiting for a working version... see #3561")
                }
            }
            withModule("com.microsoft.azure:applicationinsights-logging-log4j2") { ComponentSelection selection ->
                if (selection.candidate.version.equals("2.0.0-BETA")) {
                    selection.reject("Version 2.0.0-BETA is broken... waiting for a working version... see #3561")
                }
            }
            withModule("de.jensd:fontawesomefx-materialdesignfont") { ComponentSelection selection ->
                if (selection.candidate.version ==~ /2.*/) {
                    selection.reject("Cannot be upgraded to version 2")
                }
            }
            withModule("org.apache.pdfbox:fontbox") { ComponentSelection selection ->
                if (selection.candidate.version ==~ /2.*/) {
                    selection.reject("update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517")
                }
            }
            withModule("org.apache.pdfbox:pdfbox") { ComponentSelection selection ->
                if (selection.candidate.version ==~ /2.*/) {
                    selection.reject("update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517")
                }
            }
            withModule("mysql:mysql-connector-java") { ComponentSelection selection ->
                if (selection.candidate.version ==~ /[6-9].*/) {
                    selection.reject("http://dev.mysql.com/downloads/connector/j/ lists the version 5.* as last stable version.")
                }
            }
            withModule("org.jacoco.agent") { ComponentSelection selection ->
                if (selection.candidate.version.equals("0.8.0")) {
                    selection.reject("As a native plugin we cannot control the actual version of jacoco. This dependency should be hidden.")
                }
            }
            withModule("org.jacoco.ant") { ComponentSelection selection ->
                if (selection.candidate.version.equals("0.8.0")) {
                    selection.reject("As a native plugin we cannot control the actual version of jacoco. This dependency should be hidden.")
                }
            }
        }
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:none"
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

    javadoc {
        options {
            encoding = 'UTF-8'
            version = true
            author = true
        }
    }
}

install4j {
    installDir = file(project.ext.install4jDir)
}

// has to be defined AFTER 'dev' things to have the correct project.version
task releaseJar(dependsOn: ":org.jabref.gui:shadowJar") {
    group = 'JabRef - Release'
    description "Creates a Jar release."
    doLast {
        copy {
            from("org.jabref.gui/build/libs/org.jabref.gui-${project.version}-fat.jar")
            into("$buildDir/releases")
            rename { String fileName -> "JabRef-${project.version}.jar" }
        }
        // set executable with read permissions (first true) and for all (false)
        file("$buildDir/releases/JabRef-${project.version}.jar").setExecutable(true, false)
    }
}

// has to be defined AFTER 'dev' things to have the correct project.version
task media(type: com.install4j.gradle.Install4jTask, dependsOn: "releaseJar") {
    projectFile = file('jabref.install4j')
    release = project.version
    winKeystorePassword = System.getenv('CERTIFICATE_PW')
    macKeystorePassword = System.getenv('CERTIFICATE_PW')
    variables = [
            versionFourDots: project.ext.threeDotVersion,
            buildFileName  : jar.archiveName,
            version        : project.version
    ]

    doLast {
        copy {
            from "build/install4j"
            into "build/releases"
        }
    }
}

task release(dependsOn: ["media"]) {
    group = 'JabRef - Release'
    description 'Creates a release for all target platforms.'
}

task snapJar(dependsOn: "releaseJar", type: Delete) {
    delete fileTree(dir: "$buildDir/releases/", exclude: "JabRef-${project.version}.jar")
}
