import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem

import static org.jabref.build.Dependencies.libraries

// to update the gradle wrapper, execute
// ./gradlew wrapper --gradle-version=4.4.1 --distribution-type=bin

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.14'
    id 'com.install4j.gradle' version '7.0.6'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id "de.sebastianboegl.shadow.transformer.log4j" version "2.1.1"
    id "com.simonharrer.modernizer" version '1.6.0-1'
    id 'me.champeau.gradle.jmh' version '0.4.6'
    id 'net.ltgt.errorprone' version '0.0.14'
    id 'com.github.ben-manes.versions' version '0.20.0'
}

// use the gradle build scan feature: https://scans.gradle.com/get-started
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'project-report'
apply plugin: 'jacoco'
apply plugin: 'install4j'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'checkstyle'
apply plugin: org.jabref.build.antlr.AntlrPlugin

apply from: 'eclipse.gradle'
apply from: 'localization.gradle'
apply from: 'xjc.gradle'

group = "org.jabref"
version = "5.0-dev"
project.ext.threeDotVersion = "5.0.0.0"
project.ext.install4jDir = hasProperty("install4jDir") ? getProperty("install4jDir") : (OperatingSystem.current().isWindows() ? 'C:/Program Files/install4j7' : 'install4j7')
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "org.jabref.JabRefMain"

// These are the Java version requirements we will check on each start of JabRef
ext.minRequiredJavaVersion = "1.8.0_171"
ext.allowJava9 = false

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/gen"]
        }

        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

dependencies {
    // Include all jar-files in the 'lib' folder as dependencies
    compile fileTree(dir: 'lib', includes: ['*.jar'])

    compile libraries.jGoodiesCommon
    compile libraries.jGoodiesForms

    compile libraries.pdfbox

    // required for reading write-protected PDFs - see https://github.com/JabRef/jabref/pull/942#issuecomment-209252635
    compile libraries.bouncyCastle

    compile libraries.commonsCli

    compile libraries.libreOffice

    compile libraries.diffUtils
    compile libraries.stringSimilarity

    antlr3 libraries.antlr3
    compile libraries.antlr3runtime

    antlr4 libraries.antlr4
    compile libraries.antlr4runtime

    // VersionEye states that 6.0.5 is the most recent version, but http://dev.mysql.com/downloads/connector/j/ shows that as "Development Release"
    compile libraries.mySqlConnector

    compile libraries.postgres

    compile libraries.glazedLists

    compile libraries.guava

    // JavaFX stuff
    compile libraries.fontawesome
    compile libraries.mvvmfx
    compile libraries.easybind
    compile libraries.flowless
    compile libraries.richtextfx
    compile libraries.dndtabpane
    compile libraries.javaInject

    // Cannot be updated to 9.*.* until Jabref works with Java 9
    compile libraries.controlsFx

    compile libraries.jsoup
    compile libraries.unirest

    // >1.8.0-beta is required for java 9 compatibility
    compile libraries.loggingApi
    compile libraries.logging

    // need to use snapshots as the stable version is from 2013 and doesn't support v1.0.1 CitationStyles
    compile libraries.citationStyles
    compile libraries.citeproc

    compile libraries.latex2unicode

    compile libraries.applicationInsights

    testCompile libraries.junit
    testRuntimeOnly libraries.junitRuntime
    testCompile libraries.junitPlatformLauncher
    testCompile libraries.junitPioneer
    testRuntime libraries.testLogging
    testCompile libraries.mockito
    testCompile libraries.wiremock
    testCompile libraries.assertjSwing
    testCompile libraries.reflections
    testCompile libraries.xmlUnit
    testCompile libraries.archUnit
    testCompile libraries.xmlUnit

    checkstyle libraries.checkstyle
}

jacoco {
    toolVersion = '0.8.1'
}

dependencyUpdates {
    outputFormatter = "json"
}

//We have to use this as long as junit-pioneer has no official release
dependencyUpdates.revision = 'integration'

// We have some dependencies which cannot be updated due to various reasons.
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            if ( selection.candidate.module != "junit-pioneer" && selection.candidate.module!="javax.inject"  && selection.candidate.version ==~ /[0-9].*SNAPSHOT/ ) {
                selection.reject("Ignore SNAPSHOT releases")
            }
        }
        rules.withModule("org.controlsfx:controlsfx") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /9.*/) { // Reject version 9 or higher
                 selection.reject("Cannot be updated to 9.*.* until Jabref works with Java 9")
            }
        }
		rules.withModule("com.github.tomtung:latex2unicode_2.12") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /0.2.2/) { // Reject version higher than 2.0.2
                 selection.reject("Cannot be updated to 0.2.4 until JabRef is prepared for it")
            }
        }
        rules.withModule("de.jensd:fontawesomefx-materialdesignfont") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /2.*/) {
                selection.reject("Cannot be upgraded to version 2")
            }
        }
        rules.withModule("mysql:mysql-connector-java") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /[6-9].*/) {
                selection.reject("http://dev.mysql.com/downloads/connector/j/ lists the version 5.* as last stable version.")
            }
        }
    }
}

task checkOutdatedDependencies(dependsOn: dependencyUpdates) {
    doLast {
        def dependencyReport = new JsonSlurper().parseText(new File("build/dependencyUpdates/report.json").text)
        assert dependencyReport.outdated.count == 0: "There are outdated dependencies in build.gradle!\n Run ./gradlew dependencyUpdates to see which"
    }
}

clean {
    delete "src/main/gen"
}

processResources {
    filteringCharset = 'UTF-8'

    filesMatching("build.properties") {
        expand(version: project.version,
                "year": String.valueOf(Calendar.getInstance().get(Calendar.YEAR)),
                "authors": new File('AUTHORS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "developers": new File('DEVELOPERS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "azureInstrumentationKey": System.getenv('AzureInstrumentationKey'),
                "minRequiredJavaVersion": minRequiredJavaVersion,
                "allowJava9": allowJava9

        )
        filteringCharset = 'UTF-8'
    }

    filesMatching("resource/**/meta.xml") {
        expand version: project.version
    }
}


task generateSource(dependsOn: ["generateBstGrammarSource", "generateSearchGrammarSource"]) {
    group = 'JabRef'
    description 'Generates all Java source files.'
}

task generateBstGrammarSource(type: org.jabref.build.antlr.AntlrTask) {
    group = "JabRef"
    description = 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.'

    antlr = ANTLR3
    inputFile = 'src/main/antlr3/org/jabref/bst/Bst.g'
    outputDir = 'src/main/gen/org/jabref/logic/bst/'
}

task generateSearchGrammarSource(type: org.jabref.build.antlr.AntlrTask) {
    group = 'JabRef'
    description = "Generates java files for Search.g antlr4."

    antlr = ANTLR4
    inputFile = "src/main/antlr4/org/jabref/search/Search.g4"
    outputDir = "src/main/gen/org/jabref/search"
    javaPackage = "org.jabref.search"
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:none"
}
compileJava.dependsOn "generateSource"

compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options {
        encoding = 'UTF-8'
        version = true
        author = true
    }
}

// Test tasks
test {
    useJUnitPlatform {
        excludeTags 'DatabaseTest', 'FetcherTest', 'GUITest', 'org.jabref.testutils.category.FetcherTest', 'org.jabref.testutils.category.GUITest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "full"
    }
}

task databaseTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.DatabaseTest'
    }
}

task fetcherTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.FetcherTest'
    }
}

task guiTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.GUITest'
    }
}

// Test result tasks
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    jacoco {
        append = true
    }
}

task jacocoMerge(type: JacocoMerge) {
    executionData file("$buildDir/jacoco/test.exec"), file("$buildDir/jacoco/databaseTest.exec"), file("$buildDir/jacoco/fetcherTest.exec")
    dependsOn test, databaseTest, fetcherTest
}

jacocoTestReport {
    executionData jacocoMerge.destinationFile
    dependsOn jacocoMerge

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// Code quality tasks
checkstyle {
    // do not use other packages for checkstyle, excluding gen(erated) sources
    checkstyleMain.source = "src/main/java"
    toolVersion = '8.5'

    // do not perform checkstyle checks by default
    sourceSets = []
}

modernizer {
    // We have more than 20 issues, which are not fixed yet. Nevertheless, we produce the modernizer output.
    // See https://github.com/andrewgaul/modernizer-maven-plugin for more information on modernizer
    failOnViolations = false
}

// Release tasks
shadowJar {
    classifier 'fat'
}

/*
 * Changes project.version to VERSION--snapshot--DATE--GIT_HASH
 */
if (hasProperty('dev')) {
    String command = "git log --pretty=format:%cd--%h -n 1 --date=short"
    String commitInfo = ""
    if (OperatingSystem.current().isWindows()) {
        commitInfo = "cmd /c $command".execute().in.text
    } else {
        commitInfo = command.execute().in.text
    }

    // determine branch
    command = "git symbolic-ref -q --short HEAD"
    String branchName = ""
    if (OperatingSystem.current().isWindows()) {
        branchName = "cmd /c $command".execute().in.text
    } else {
        branchName = command.execute().in.text
    }
    // A newline is returned. Remove it. (trim())
    // In the context of github, the branch name could be something like "pull/277"
    // "/" is an illegal character. To be safe, all illegal filename characters are replaced by "_"
    // http://stackoverflow.com/a/15075907/873282 describes the used pattern.
    branchName = branchName.trim().replaceAll("[^a-zA-Z0-9.-]", "_")

    // hack string
    // first the date (%cd), then the branch name, and finally the commit id (%h)
    String infoString = commitInfo.substring(0, 10) + "--" + branchName + "--" + commitInfo.substring(12)

    project.version += "--snapshot--" + infoString
}

install4j {
    installDir = file(project.ext.install4jDir)
}

task generateFinalJabRefPS1File(type: Copy) {
    from('buildres') {
        include 'JabRef.ps1'
    }
    into 'build'
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [jabRefJarFileName: jar.archiveName])
}

// has to be defined AFTER 'dev' things to have the correct project.version
task media(type: com.install4j.gradle.Install4jTask, dependsOn: ["releaseJar", "generateFinalJabRefPS1File"]) {
    projectFile = file('jabref.install4j')
    release = project.version
    winKeystorePassword = System.getenv('CERTIFICATE_PW')
    macKeystorePassword = System.getenv('CERTIFICATE_PW')
    variables = [
            versionFourDots: project.ext.threeDotVersion,
            buildFileName  : jar.archiveName,
            version        : project.version
    ]

    doLast {
        copy {
            from "build/install4j"
            into "build/releases"
        }
    }
}


task release(dependsOn: ["media", "releaseJar"]) {
    group = 'JabRef - Release'
    description 'Creates a release for all target platforms.'
}

task releaseJar(dependsOn: "shadowJar") {
    group = 'JabRef - Release'
    description "Creates a Jar release."
    doLast {
        copy {
            from("$buildDir/libs/JabRef-${project.version}-fat.jar")
            into("$buildDir/releases")
            rename { String fileName ->
                fileName.replace('-fat', '')
            }
        }
        // set executable with read permissions (first true) and for all (false)
        file("$buildDir/releases/JabRef-${project.version}.jar").setExecutable(true, false)
    }
}

task snapJar(dependsOn: "releaseJar", type: Delete) {
    delete fileTree(dir: "$buildDir/releases/", exclude: "JabRef-${project.version}.jar")
}

jmh {
    warmupIterations = 5
    iterations = 10
    fork = 2
}

// Source: https://stackoverflow.com/a/44168582/873282
task downloadDependencies {
  description "Pre-downloads *most* dependencies"
  doLast {
    configurations.getAsMap().each { name, config ->
      println "Retrieving dependencies for $name"
      try {
        config.files
      } catch (e) {
        // some cannot be resolved, just log them
        project.logger.info e.message
      }
    }
  }
}
