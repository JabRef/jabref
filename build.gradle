// must appear before any plugins blocks - see http://gradle.org/docs/2.4/userguide/plugins.html#sec:plugins_block
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.2'
    }
}

plugins {
    //The format plugin requires Java 1.8. As JabRef currently supports Java 1.6, the formatter plugin is disabled.
    //id "com.github.youribonnaffe.gradle.format" version "1.2"

    // Version 0.3 requires Java 1.7, therefore we use version 0.2
    // This version, however, is not available as plugin directly from gradle
    // id "eu.appsatori.fatjar" version "0.3"
}

apply plugin: "fatjar"
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "application"
apply plugin: "project-report"
apply plugin: "sonar-runner"

/* disabled, because plugin requires Java 1.8
format {
    configurationFile = file('formatter_settings.xml')
    // default: reformat main and test
    //files = sourceSets.main.java
}
*/

fatJar {
    classifier 'fat'
    manifest {
        attributes 'Main-Class': "net.sf.jabref.JabRefMain"
    }
}

test {
    testLogging {
        exceptionFormat "full" // default is "short"
    }
}

version = "2.11dev"

repositories {
    jcenter()
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/gen"]
        }
    }
}

configurations {
    generateClasspath
    antlr3
    antlr4
}

dependencies {

    // jgoodies
    compile 'com.jgoodies:jgoodies-common:1.7.0'
    compile 'com.jgoodies:jgoodies-forms:1.7.2'
    compile 'com.jgoodies:jgoodies-looks:2.5.3'
    
    compile 'org.swinglabs:swingx:1.6.1'

    compile 'org.apache.pdfbox:pdfbox:1.8.9'
    compile 'org.apache.pdfbox:fontbox:1.8.9'
    compile 'org.apache.pdfbox:jempbox:1.8.9'

    compile 'commons-cli:commons-cli:1.3.1'

    compile 'org.openoffice:juh:3.2.1'
    compile 'org.openoffice:jurt:3.2.1'
    compile 'org.openoffice:ridl:3.2.1'
    compile 'org.openoffice:unoil:3.2.1'

    antlr3 'org.antlr:antlr:3.5.2'
    compile 'org.antlr:antlr-runtime:3.5.2'

    antlr4 'org.antlr:antlr4:4.5.1'
    compile 'org.antlr:antlr4-runtime:4.5.1'

    compile 'mysql:mysql-connector-java:5.1.36'
    compile 'org.postgresql:postgresql:9.4-1201-jdbc41'

    compile 'net.java.dev.glazedlists:glazedlists_java15:1.9.1'
    compile fileTree(dir: 'lib', includes: ['microba.jar', 'spin.jar'])

    compile 'net.java.dev.jna:jna:4.1.0'

    compile files('lib/jsplitbutton.jar')

    compile 'com.google.guava:guava:18.0'

    compile 'commons-logging:commons-logging:1.2'
    // not available in maven repository
    compile fileTree(dir: 'lib/plugin', includes: ['jpf.jar', 'jpf-boot.jar', 'JPFCodeGenerator-rt.jar'])

    compile 'com.sun.jersey:jersey-client:1.19'
    compile 'com.sun.jersey:jersey-core:1.19'
    compile 'com.sun.jersey.contribs:jersey-multipart:1.19'

    compile fileTree(dir: 'lib/spl/sciplore', includes: ['*.jar'])

    compile 'junit:junit:4.12'

    generateClasspath fileTree(dir: 'lib/plugin', includes: ['jpf.jar', 'jpf-boot.jar', 'JPFCodeGenerator.jar', 'velocity-dep-1.5.jar'])
}

// use ant targets with prefix antTargets.XXXXX
ant.importBuild "build-wrapper.xml"
// add jars from this classpath to the classpath for the ant build
if (org.gradle.internal.os.OperatingSystem.current().windows) {
    // according to the discussion at https://github.com/JabRef/jabref/pull/58, the separators are different on Windows and Linux
    ant.references.jars.setFiles(configurations.compile.asPath.replace(";"," "))
} else {
    ant.references.jars.setFiles(configurations.compile.asPath.replace(":"," "))
}

sourceCompatibility = 1.6
mainClassName = "net.sf.jabref.JabRefMain"

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

compileJava {
    // files are all encoded using UTF-8
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:none"
}

compileTestJava {
    // files are all encoded using UTF-8
    options.encoding = 'UTF-8'
}

javadoc {
    options {
        // files are all encoded using UTF-8
        encoding = 'UTF-8'
        version = true
        author = true
    }
}

// jabref specific tasks
compileJava.dependsOn "generateSource"

task generateSource(dependsOn: ["generatePluginSource", "generateBstGrammarSource", "generateSearchGrammarSource"]) {
    group = 'JabRef'
    description 'Generates all Java source files.'
}

task generatePluginSource(type: JavaExec) {
    group 'JabRef'
    description 'Generates _JabRefPlugin.java with JPF.'

    ext.pluginsDir = "src/main/resources/plugins"

    inputs.dir file(ext.pluginsDir)
    outputs.file file("src/main/gen/net/sf/jabref/plugin/core/generated/_JabRefPlugin.java")

    main = "net.sf.jabref.plugin.util.CodeGenerator"
    args = [ext.pluginsDir]
    classpath = configurations.generateClasspath
}

task generateBstGrammarSource(type: JavaExec) {
    group 'JabRef'
    description 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.'

    File antlrSource = file('src/main/antlr3/net/sf/jabref/bst/Bst.g')

    inputs.file antlrSource
    outputs.file file('src/main/gen/net/sf/jabref/bst/BstLexer.java')
    outputs.file file('src/main/gen/net/sf/jabref/bst/BstParser.java')

    main = 'org.antlr.Tool'
    classpath = configurations.antlr3
    args = ["-o", file('src/main/gen/net/sf/jabref/bst/'), antlrSource]
}

task generateSearchGrammarSource(type: JavaExec) {
    String grammarFile = "Search"

    group 'JabRef'
    description "Generates java files for ${grammarFile}.g antlr4."

    String packagePath = "net/sf/jabref/search"
    File antlrPath = file("src/main/antlr4")
    File genPath = file("src/main/gen")

    File antlrSource = file("$antlrPath/$packagePath/${grammarFile}.g4")
    File destinationDir = file("$genPath/$packagePath")

    inputs.file antlrSource
    outputs.file file("$destinationDir/${grammarFile}Parser.java")
    outputs.file file("$destinationDir/${grammarFile}Lexer.java")
    outputs.file file("$destinationDir/${grammarFile}Visitor.java")
    outputs.file file("$destinationDir/${grammarFile}BaseVisitor.java")
    outputs.file file("$destinationDir/${grammarFile}.tokens")
    outputs.file file("$destinationDir/${grammarFile}Lexer.tokens")

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = ["-o", destinationDir, "-visitor", "-no-listener", "-package", "net.sf.jabref.search", antlrSource]
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}
