import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem

// to update the gradle wrapper, execute
// ./gradlew wrapper --gradle-version=4.4.1 --distribution-type=bin

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0-M1'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.11'
    id 'com.install4j.gradle' version '7.0.3'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id "de.sebastianboegl.shadow.transformer.log4j" version "2.1.1"
    id "com.simonharrer.modernizer" version '1.5.0-1'
    id 'me.champeau.gradle.jmh' version '0.4.3'
    id 'net.ltgt.errorprone' version '0.0.13'
    id 'com.github.ben-manes.versions' version '0.17.0'
}

// use the gradle build scan feature: https://scans.gradle.com/get-started
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'project-report'
apply plugin: 'jacoco'
apply plugin: 'install4j'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'checkstyle'
apply plugin: 'org.junit.platform.gradle.plugin'

apply from: 'eclipse.gradle'
apply from: 'localization.gradle'
apply from: 'xjc.gradle'

group = "org.jabref"
version = "4.2-dev"
project.ext.threeDotVersion = "4.1.0.1"
project.ext.install4jDir = hasProperty("install4jDir") ? getProperty("install4jDir") : (OperatingSystem.current().isWindows() ? 'C:/Program Files/install4j6' : 'install4j6')
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "org.jabref.JabRefMain"

// These are the Java version requirements we will check on each start of JabRef
ext.minRequiredJavaVersion = "1.8.0_144"
ext.allowJava9 = false

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/gen"]
        }

        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

configurations {
    antlr3
    antlr4
}

dependencies {
    compile fileTree(dir: 'lib', includes: ['*.jar'])

    compile 'com.jgoodies:jgoodies-common:1.8.1'
    compile 'com.jgoodies:jgoodies-forms:1.9.0'

    // update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517
    compile 'org.apache.pdfbox:pdfbox:1.8.13'
    compile 'org.apache.pdfbox:fontbox:1.8.13'
    compile 'org.apache.pdfbox:jempbox:1.8.13'

    // required for reading write-protected PDFs - see https://github.com/JabRef/jabref/pull/942#issuecomment-209252635
    compile 'org.bouncycastle:bcprov-jdk15on:1.59'

    compile 'commons-cli:commons-cli:1.4'

    compile 'org.openoffice:juh:4.1.2'
    compile 'org.openoffice:jurt:4.1.2'
    compile 'org.openoffice:ridl:4.1.2'
    compile 'org.openoffice:unoil:4.1.2'

    compile 'com.github.bkromhout:java-diff-utils:2.1.1'
    compile 'info.debatty:java-string-similarity:1.0.1'

    antlr3 'org.antlr:antlr:3.5.2'
    compile 'org.antlr:antlr-runtime:3.5.2'

    antlr4 'org.antlr:antlr4:4.7.1'
    compile 'org.antlr:antlr4-runtime:4.7.1'

    // VersionEye states that 6.0.5 is the most recent version, but http://dev.mysql.com/downloads/connector/j/ shows that as "Development Release"
    compile 'mysql:mysql-connector-java:5.1.45'

    compile 'com.impossibl.pgjdbc-ng:pgjdbc-ng:0.7.1'

    compile 'net.java.dev.glazedlists:glazedlists_java15:1.9.1'

    compile 'com.google.guava:guava:23.6-jre'

    // JavaFX stuff
    compile 'com.airhacks:afterburner.fx:1.7.0'
    compile 'de.codecentric.centerdevice:javafxsvg:1.2.1'
    compile 'de.jensd:fontawesomefx-materialdesignfont:1.7.22-4'
    compile 'de.saxsys:mvvmfx-validation:1.7.0'
    compile 'org.fxmisc.easybind:easybind:1.0.3'
    compile 'org.fxmisc.flowless:flowless:0.6'
    compile 'org.fxmisc.richtext:richtextfx:0.8.1'

    // Cannot be updated to 9.*.* until Jabref works with Java 9
    compile 'org.controlsfx:controlsfx:8.40.14'

    compile 'org.jsoup:jsoup:1.11.2'
    compile 'com.mashape.unirest:unirest-java:1.4.9'

    compile 'commons-logging:commons-logging:1.2'
    compile 'org.apache.logging.log4j:log4j-jcl:2.10.0'
    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'org.apache.logging.log4j:log4j-core:2.10.0'

    // need to use snapshots as the stable version is from 2013 and doesn't support v1.0.1 CitationStyles
    compile 'org.citationstyles:styles:1.0.1-SNAPSHOT'
    compile 'org.citationstyles:locales:1.0.1-SNAPSHOT'
    compile 'de.undercouch:citeproc-java:1.0.1'

    compile 'com.github.tomtung:latex2unicode_2.12:0.2.2'

    compile group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '1.0.9'
    compile group: 'com.microsoft.azure', name: 'applicationinsights-logging-log4j2', version: '1.0.9'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0-M1'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.1.0-M1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0-M1'
    testRuntime 'org.junit.vintage:junit-vintage-engine:5.1.0-M1'
    testCompile 'org.junit.platform:junit-platform-launcher:1.1.0-M1'
    testRuntime 'org.apache.logging.log4j:log4j-core:2.10.0'
    testRuntime 'org.apache.logging.log4j:log4j-jul:2.10.0'
    testCompile 'org.mockito:mockito-core:2.13.0'
    testCompile 'com.github.tomakehurst:wiremock:2.13.0'
    testCompile 'org.assertj:assertj-swing-junit:3.8.0'
    testCompile 'org.reflections:reflections:0.9.11'
    testCompile 'org.xmlunit:xmlunit-core:2.5.1'
    testCompile 'org.xmlunit:xmlunit-matchers:2.5.1'
    testCompile 'com.tngtech.archunit:archunit-junit:0.5.0'
    testCompile 'org.slf4j:slf4j-jcl:1.7.25' // required by ArchUnit to enable logging over jcl
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit:4.0.+"

    checkstyle 'com.puppycrawl.tools:checkstyle:8.7'
}

dependencyUpdates {
    outputFormatter = "json"
}

// We have some dependencies which cannot be updated due to various reasons.
dependencyUpdates.resolutionStrategy = {
    componentSelection {
        withModule("org.controlsfx:controlsfx") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /9.*/) { // Reject version 9 or higher
                selection.reject("Cannot be updated to 9.*.* until Jabref works with Java 9")
            }
        }
        withModule("com.microsoft.azure:applicationinsights-core") { ComponentSelection selection ->
            if (selection.candidate.version.equals("1.0.10")) {
                selection.reject("Version 1.0.10 is broken... waiting for 1.0.11")
            }
        }
        withModule("com.microsoft.azure:applicationinsights-logging-log4j2") { ComponentSelection selection ->
            if (selection.candidate.version.equals("1.0.10")) {
                selection.reject("Version 1.0.10 is broken... waiting for 1.0.11")
            }
        }
        withModule("com.microsoft.azure:applicationinsights-core") { ComponentSelection selection ->
            if (selection.candidate.version.equals("2.0.0-BETA")) {
                selection.reject("Version 2.0.0-BETA is broken... waiting for a working version... see #3561")
            }
        }
        withModule("com.microsoft.azure:applicationinsights-logging-log4j2") { ComponentSelection selection ->
            if (selection.candidate.version.equals("2.0.0-BETA")) {
                selection.reject("Version 2.0.0-BETA is broken... waiting for a working version... see #3561")
            }
        }
        withModule("de.jensd:fontawesomefx-materialdesignfont") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /2.*/) {
                selection.reject("Cannot be upgraded to version 2")
            }
        }
        withModule("org.apache.pdfbox:fontbox") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /2.*/) {
                selection.reject("update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517")
            }
        }
        withModule("org.apache.pdfbox:pdfbox") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /2.*/) {
                selection.reject("update to 2.0.x is not possible - see https://github.com/JabRef/jabref/pull/1096#issuecomment-208857517")
            }
        }
        withModule("mysql:mysql-connector-java") { ComponentSelection selection ->
            if (selection.candidate.version ==~ /[6-9].*/) {
                selection.reject("http://dev.mysql.com/downloads/connector/j/ lists the version 5.* as last stable version.")
            }
        }

    }
}

task checkOutdatedDependencies(dependsOn: dependencyUpdates) {
    doLast {
        def dependencyReport = new JsonSlurper().parseText(new File("build/dependencyUpdates/report.json").text)
        assert dependencyReport.outdated.count == 0: "There are outdated dependencies in build.gradle!\n Run ./gradlew dependencyUpdates to see which"
    }
}

clean {
    delete "src/main/gen"
}

processResources {
    filteringCharset = 'UTF-8'

    filesMatching("build.properties") {
        expand(version: project.version,
                "year": String.valueOf(Calendar.getInstance().get(Calendar.YEAR)),
                "authors": new File('AUTHORS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "developers": new File('DEVELOPERS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "azureInstrumentationKey": System.getenv('AzureInstrumentationKey'),
                "minRequiredJavaVersion": minRequiredJavaVersion,
                "allowJava9": allowJava9

        )
        filteringCharset = 'UTF-8'
    }

    filesMatching("resource/**/meta.xml") {
        expand version: project.version
    }
}


task generateSource(dependsOn: ["generateBstGrammarSource", "generateSearchGrammarSource"]) {
    group = 'JabRef'
    description 'Generates all Java source files.'
}

task generateBstGrammarSource(type: JavaExec) {
    group 'JabRef'
    description 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.'

    File antlrSource = file('src/main/antlr3/org/jabref/bst/Bst.g')

    inputs.file antlrSource
    outputs.file file('src/main/gen/org/jabref/logic/bst/BstLexer.java')
    outputs.file file('src/main/gen/org/jabref/logic/bst/BstParser.java')

    main = 'org.antlr.Tool'
    classpath = configurations.antlr3
    args = ["-o", file('src/main/gen/org/jabref/logic/bst/'), antlrSource]
}

task generateSearchGrammarSource(type: JavaExec) {
    String grammarFile = "Search"

    group 'JabRef'
    description "Generates java files for ${grammarFile}.g antlr4."

    String packagePath = "org/jabref/search"
    File antlrPath = file("src/main/antlr4")
    File genPath = file("src/main/gen")

    File antlrSource = file("$antlrPath/$packagePath/${grammarFile}.g4")
    File destinationDir = file("$genPath/$packagePath")

    inputs.file antlrSource
    outputs.file file("$destinationDir/${grammarFile}Parser.java")
    outputs.file file("$destinationDir/${grammarFile}Lexer.java")
    outputs.file file("$destinationDir/${grammarFile}Visitor.java")
    outputs.file file("$destinationDir/${grammarFile}BaseVisitor.java")
    outputs.file file("$destinationDir/${grammarFile}.tokens")
    outputs.file file("$destinationDir/${grammarFile}Lexer.tokens")

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = ["-o", destinationDir, "-visitor", "-no-listener", "-package", "org.jabref.search", antlrSource]
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:none"
}
compileJava.dependsOn "generateSource"

compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options {
        encoding = 'UTF-8'
        version = true
        author = true
    }
}

// Test tasks
junitPlatform {
    filters {
        tags {
            exclude 'DatabaseTest', 'org.jabref.testutils.category.FetcherTest', 'org.jabref.testutils.category.GUITest'
        }
    }

    logManager 'org.apache.logging.log4j.jul.LogManager'
}

task databaseTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.DatabaseTest'
    }
}

task fetcherTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.FetcherTest'
    }
}

task guiTest(type: Test) {
    useJUnit {
        includeCategories 'org.jabref.testutils.category.GUITest'
    }
}

// Test result tasks
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    jacoco {
        append = true
    }
}

task jacocoMerge(type: JacocoMerge) {
    executionData file("$buildDir/jacoco/junitPlatformTest.exec"), file("$buildDir/jacoco/databaseTest.exec"), file("$buildDir/jacoco/fetcherTest.exec")
    dependsOn junitPlatformTest, databaseTest, fetcherTest
}

jacocoTestReport {
    executionData jacocoMerge.destinationFile
    dependsOn jacocoMerge

    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

afterEvaluate {
    def junitPlatformTest = tasks.junitPlatformTest

    jacoco {
        toolVersion = '0.8.0'
        applyTo(junitPlatformTest)
    }

    task jacocoJunit5TestReport(type: JacocoReport) {
        executionData jacocoMerge.destinationFile
        dependsOn jacocoMerge
        sourceSets sourceSets.main
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.enabled true
            html.enabled true
        }
    }
}

// Code quality tasks
checkstyle {
    // do not use other packages for checkstyle, excluding gen(erated) sources
    checkstyleMain.source = "src/main/java"
    toolVersion = '8.5'
}

checkstyleMain.shouldRunAfter test
checkstyleTest.shouldRunAfter test

modernizer {
    // We have more than 20 issues, which are not fixed yet. Nevertheless, we produce the modernizer output.
    // See https://github.com/andrewgaul/modernizer-maven-plugin for more information on modernizer
    failOnViolations = false
}

// Release tasks
shadowJar {
    classifier 'fat'
}

/*
 * Changes project.version to VERSION--snapshot--DATE--GIT_HASH
 */
if (hasProperty('dev')) {
    String command = "git log --pretty=format:%cd--%h -n 1 --date=short"
    String commitInfo = ""
    if (OperatingSystem.current().isWindows()) {
        commitInfo = "cmd /c $command".execute().in.text
    } else {
        commitInfo = command.execute().in.text
    }

    // determine branch
    command = "git symbolic-ref -q --short HEAD"
    String branchName = ""
    if (OperatingSystem.current().isWindows()) {
        branchName = "cmd /c $command".execute().in.text
    } else {
        branchName = command.execute().in.text
    }
    // A newline is returned. Remove it. (trim())
    // In the context of github, the branch name could be something like "pull/277"
    // "/" is an illegal character. To be safe, all illegal filename characters are replaced by "_"
    // http://stackoverflow.com/a/15075907/873282 describes the used pattern.
    branchName = branchName.trim().replaceAll("[^a-zA-Z0-9.-]", "_")

    // hack string
    // first the date (%cd), then the branch name, and finally the commit id (%h)
    String infoString = commitInfo.substring(0, 10) + "--" + branchName + "--" + commitInfo.substring(12)

    project.version += "--snapshot--" + infoString
}

install4j {
    installDir = file(project.ext.install4jDir)
}

// has to be defined AFTER 'dev' things to have the correct project.version
task media(type: com.install4j.gradle.Install4jTask, dependsOn: "releaseJar") {
    projectFile = file('jabref.install4j')
    release = project.version
    winKeystorePassword = System.getenv('CERTIFICATE_PW')
    macKeystorePassword = System.getenv('CERTIFICATE_PW')
    variables = [
            versionFourDots: project.ext.threeDotVersion,
            buildFileName  : jar.archiveName,
            version        : project.version
    ]

    doLast {
        copy {
            from "build/install4j"
            into "build/releases"
        }
    }
}


task release(dependsOn: ["media", "releaseJar"]) {
    group = 'JabRef - Release'
    description 'Creates a release for all target platforms.'
}

task releaseJar(dependsOn: "shadowJar") {
    group = 'JabRef - Release'
    description "Creates a Jar release."
    doLast {
        copy {
            from("$buildDir/libs/JabRef-${project.version}-fat.jar")
            into("$buildDir/releases")
            rename { String fileName ->
                fileName.replace('-fat', '')
            }
        }
        // set executable with read permissions (first true) and for all (false)
        file("$buildDir/releases/JabRef-${project.version}.jar").setExecutable(true, false);
    }
}

task snapJar(dependsOn: "releaseJar", type: Delete) {
    delete fileTree(dir: "$buildDir/releases/", exclude: "JabRef-${project.version}.jar")
}

jmh {
    warmupIterations = 5
    iterations = 10
    fork = 2
}
