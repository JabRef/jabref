import org.gradle.internal.os.OperatingSystem
import org.jabref.build.JournalAbbreviationConverter
import org.jabref.build.xjc.XjcPlugin
import org.jabref.build.xjc.XjcTask

plugins {
    id 'application'

    id 'com.github.andygoossens.modernizer' version '1.8.0'

    id 'me.champeau.gradle.jmh' version '0.5.3'

    id 'org.javamodularity.moduleplugin' version '1.8.12'

    id 'org.openjfx.javafxplugin' version '0.0.14'

    id 'org.beryx.jlink' version '2.26.0'

    // nicer test outputs during running and completion
    // Homepage: https://github.com/radarsh/gradle-test-logger-plugin
    id 'com.adarshr.test-logger' version '3.2.0'

    id 'jacoco'

    id 'checkstyle'

    id 'project-report'

    id 'idea'

    id 'org.openrewrite.rewrite' version '6.1.11'
}

// Enable following for debugging
// gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.

apply plugin: XjcPlugin

apply from: 'eclipse.gradle'

group = "org.jabref"
version = project.findProperty('projVersion') ?: '100.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_19
    targetCompatibility = JavaVersion.VERSION_19
    // Workaround needed for Eclipse, probably because of https://github.com/gradle/gradle/issues/16922
    // Should be removed as soon as Gradle 7.0.1 is released ( https://github.com/gradle/gradle/issues/16922#issuecomment-828217060 )
    modularity.inferModulePath.set(false)

    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

application {
    mainClass.set('org.jabref.cli.Launcher')
    mainModule.set('org.jabref')
}

// Workaround for https://github.com/openjfx/javafx-gradle-plugin/issues/89
// See also https://github.com/java9-modularity/gradle-modules-plugin/issues/165
modularity.disableEffectiveArgumentsAdjustment()

sourceSets {
    main {
        java {
            // src-gen reasoning: https://stackoverflow.com/a/64612308/873282
            srcDirs = ["src/main/java", "src-gen/main/java"]
        }
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/groups/public' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://sandec.jfrog.io/artifactory/repo' }
}

configurations {
    antlr4
    // TODO: Remove the following workaround for split error messages such as
    // error: module java.xml.bind reads package javax.annotation from both jsr305 and java.annotation
    compile {
        extendsFrom implementation
        exclude group: "javax.activation"
    }
}

dependencyLocking {
    lockAllConfigurations()
}

javafx {
    version = "20"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing' ]
}

jacoco {
    toolVersion = "0.8.10"
}

dependencies {
    // Include all jar-files in the 'lib' folder as dependencies
    implementation fileTree(dir: 'lib', includes: ['*.jar'])

    implementation 'org.apache.pdfbox:pdfbox:3.0.0-RC1'
    implementation 'org.apache.pdfbox:fontbox:3.0.0-RC1'
    implementation 'org.apache.pdfbox:xmpbox:3.0.0-RC1'

    implementation 'org.apache.lucene:lucene-core:9.7.0'
    implementation 'org.apache.lucene:lucene-queryparser:9.7.0'
    implementation 'org.apache.lucene:lucene-queries:9.7.0'
    implementation 'org.apache.lucene:lucene-analysis-common:9.7.0'
    implementation 'org.apache.lucene:lucene-highlighter:9.7.0'

    implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.10.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation 'com.h2database:h2-mvstore:2.1.214'

    // required for reading write-protected PDFs - see https://github.com/JabRef/jabref/pull/942#issuecomment-209252635
    implementation 'org.bouncycastle:bcprov-jdk18on:1.75'

    implementation 'commons-cli:commons-cli:1.5.0'

    implementation 'org.libreoffice:unoloader:7.5.3'
    implementation 'org.libreoffice:libreoffice:7.5.3'

    implementation 'io.github.java-diff-utils:java-diff-utils:4.12'
    implementation 'info.debatty:java-string-similarity:2.0.0'
    implementation 'com.github.javakeyring:java-keyring:1.0.2'

    antlr4 'org.antlr:antlr4:4.13.0'
    implementation 'org.antlr:antlr4-runtime:4.13.0'

    implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '6.6.0.202305301015-r'

    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.15.2'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.15.2'

    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.9'

    implementation 'org.postgresql:postgresql:42.6.0'

    implementation ('com.oracle.ojdbc:ojdbc10:19.3.0.0') {
        // causing module issues
        exclude module: 'oraclepki'
    }

    implementation ('com.google.guava:guava:32.1.1-jre') {
        // TODO: Remove this as soon as https://github.com/google/guava/issues/2960 is fixed
        exclude module: "jsr305"
    }

    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'


    implementation 'org.jabref:afterburner.fx:1.1.0-SNAPSHOT'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-materialdesign2-pack:12.3.1'
    implementation 'com.github.sialcasa.mvvmFX:mvvmfx-validation:f195849ca9' //jitpack
    implementation 'de.saxsys:mvvmfx:1.8.0'
    implementation 'com.tobiasdiez:easybind:2.2.1-SNAPSHOT'
    implementation 'org.fxmisc.flowless:flowless:0.7.1'
    implementation 'org.fxmisc.richtext:richtextfx:0.11.0'
    implementation (group: 'com.dlsc.gemsfx', name: 'gemsfx', version: '1.74.0') {
        exclude module: 'javax.inject' // Split package, use only jakarta.inject
        exclude group: 'org.apache.logging.log4j'
    }

    implementation 'org.controlsfx:controlsfx:11.1.2'

    implementation 'org.jsoup:jsoup:1.16.1'
    implementation 'com.konghq:unirest-java:3.14.4'

    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation "org.tinylog:tinylog-api:2.6.2"
    implementation "org.tinylog:slf4j-tinylog:2.6.2"
    implementation "org.tinylog:tinylog-impl:2.6.2"

    implementation 'de.undercouch:citeproc-java:3.0.0-beta.2'

    // jakarta.activation is already dependency of glassfish
    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '3.0.1'
    implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '3.0.2'

    implementation ('com.github.tomtung:latex2unicode_2.13:0.3.2') {
        exclude module: 'fastparse_2.13'
    }

    implementation group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '2.4.1'
    implementation (group: 'com.microsoft.azure', name: 'applicationinsights-logging-log4j2', version: '2.4.1') {
        exclude module: "log4j-core"
    }

    implementation 'com.vladsch.flexmark:flexmark:0.64.8'

    implementation group: 'net.harawata', name: 'appdirs', version: '1.2.1'

    implementation group: 'org.jooq', name: 'jool', version: '0.9.15'

    testImplementation 'io.github.classgraph:classgraph:4.8.160'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.9.3'

    testImplementation 'org.mockito:mockito-core:5.4.0'
    testImplementation 'org.xmlunit:xmlunit-core:2.9.1'
    testImplementation 'org.xmlunit:xmlunit-matchers:2.9.1'
    testRuntimeOnly 'com.tngtech.archunit:archunit-junit5-engine:1.0.1'
    testImplementation 'com.tngtech.archunit:archunit-junit5-api:1.0.1'
    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation "org.hamcrest:hamcrest-library:2.2"

    checkstyle 'com.puppycrawl.tools:checkstyle:10.12.1'
    // xjc needs the runtime as well for the ant task, otherwise it fails
    xjc group: 'org.glassfish.jaxb', name: 'jaxb-xjc', version: '3.0.2'
    xjc group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '3.0.2'

    rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:2.0.5"))
    rewrite("org.openrewrite.recipe:rewrite-logging-frameworks")
    rewrite("org.openrewrite.recipe:rewrite-static-analysis")
}

clean {
    delete "src/main/generated"
    delete "src-gen"
}

processResources {
    gradle.taskGraph.whenReady {
        if (gradle.taskGraph.hasTask(":jpackage")) {
            logger.info('Adding buildres/csl to resources')
            from("buildres/csl")
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }

    filteringCharset = 'UTF-8'

    filesMatching("build.properties") {
        expand(version: project.findProperty('projVersionInfo') ?: '100.0.0',
                "year": String.valueOf(Calendar.getInstance().get(Calendar.YEAR)),
                "maintainers": new File('MAINTAINERS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "azureInstrumentationKey": System.getenv('AzureInstrumentationKey') ? System.getenv('AzureInstrumentationKey') : '',
                "springerNatureAPIKey": System.getenv('SpringerNatureAPIKey') ? System.getenv('SpringerNatureAPIKey') : '',
                "astrophysicsDataSystemAPIKey": System.getenv('AstrophysicsDataSystemAPIKey') ? System.getenv('AstrophysicsDataSystemAPIKey') : '',
                "ieeeAPIKey": System.getenv('IEEEAPIKey') ? System.getenv('IEEEAPIKey') : '',
                "scienceDirectApiKey": System.getenv('SCIENCEDIRECTAPIKEY') ? System.getenv('SCIENCEDIRECTAPIKEY') : '',
                "biodiversityHeritageApiKey": System.getenv('BiodiversityHeritageApiKey') ? System.getenv('BiodiversityHeritageApiKey') : ''
        )
        filteringCharset = 'UTF-8'
    }

    filesMatching(["resources/resource/ods/meta.xml", "resources/resource/openoffice/meta.xml"]) {
        expand version: project.version
    }
}

task generateSource(dependsOn: ["generateBstGrammarSource",
                                "generateSearchGrammarSource",
                                "generateCitaviSource"]) {
    group = 'JabRef'
    description 'Generates all necessary (Java) source files.'
}

tasks.register("generateBstGrammarSource", JavaExec) {
    main = "org.antlr.v4.Tool"
    classpath = configurations.antlr4
    group = "JabRef"
    description = 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr4.'

    inputs.dir('src/main/antlr4/org/jabref/bst/')
    outputs.dir("src-gen/main/java/org/jabref/logic/bst/")
    args = ["-o", "src-gen/main/java/org/jabref/logic/bst/", "-visitor", "-no-listener", "-package", "org.jabref.logic.bst", "$projectDir/src/main/antlr4/org/jabref/bst/Bst.g4"]
}

tasks.register("generateSearchGrammarSource", JavaExec) {
    main = "org.antlr.v4.Tool"
    classpath = configurations.antlr4
    group = 'JabRef'
    description = "Generates java files for Search.g antlr4."

    inputs.dir("src/main/antlr4/org/jabref/search/")
    outputs.dir("src-gen/main/java/org/jabref/search/")
    args  = ["-o","src-gen/main/java/org/jabref/search" , "-visitor", "-no-listener", "-package", "org.jabref.search", "$projectDir/src/main/antlr4/org/jabref/search/Search.g4"]
}



task generateCitaviSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the citavi importer."

    schemaFile = "src/main/resources/xjc/citavi/citavi.xsd"
    outputDirectory = "src-gen/main/java/"
    javaPackage = "org.jabref.logic.importer.fileformat.citavi"
}

task generateJournalAbbreviationList(type: JournalAbbreviationConverter) {
    group = 'JabRef'
    description = "Converts the comma-separated journal abbreviation file to a H2 MVStore."

    // This directory is filled by "refresh-journal-lists.yml"
    // It takes the contents of https://github.com/JabRef/abbrv.jabref.org.git
    inputDir = file("build/journals")

    outputDir = file("src/main/resources/journals")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava {
    options.compilerArgs << "-Xlint:none"
    dependsOn "generateSource"

    options.generatedSourceOutputDirectory.set(file("src-gen/main/java"))

    moduleOptions {
        // TODO: Remove access to internal api
        addExports = [
                'javafx.controls/com.sun.javafx.scene.control' : 'org.jabref',
                'org.controlsfx.controls/impl.org.controlsfx.skin' : 'org.jabref'
        ]
    }
}

run {
    // TODO: Remove access to internal api
    moduleOptions {
        addExports = [
                'javafx.controls/com.sun.javafx.scene.control' : 'org.jabref',
                'org.controlsfx.controls/impl.org.controlsfx.skin' : 'org.jabref',

                // Not sure why we need to restate the controlfx exports
                // Taken from here: https://github.com/controlsfx/controlsfx/blob/9.0.0/build.gradle#L1
                'javafx.graphics/com.sun.javafx.scene' : 'org.controlsfx.controls',
                'javafx.graphics/com.sun.javafx.scene.traversal' : 'org.controlsfx.controls',
                'javafx.graphics/com.sun.javafx.css' : 'org.controlsfx.controls',
                'javafx.controls/com.sun.javafx.scene.control' : 'org.controlsfx.controls',
                'javafx.controls/com.sun.javafx.scene.control.behavior' : 'org.controlsfx.controls',
                'javafx.controls/com.sun.javafx.scene.control.inputmap' : 'org.controlsfx.controls',
                'javafx.base/com.sun.javafx.event' : 'org.controlsfx.controls',
                'javafx.base/com.sun.javafx.collections' : 'org.controlsfx.controls',
                'javafx.base/com.sun.javafx.runtime': 'org.controlsfx.controls',
                'javafx.web/com.sun.webkit' : 'org.controlsfx.controls',
        ]

        addOpens = [
                'javafx.controls/javafx.scene.control' : 'org.jabref',
                'org.controlsfx.controls/org.controlsfx.control.textfield' : 'org.jabref',
                'javafx.controls/com.sun.javafx.scene.control' : 'org.jabref',

                'javafx.controls/javafx.scene.control.skin' : 'org.controlsfx.controls',
                'javafx.graphics/javafx.scene' : 'org.controlsfx.controls'
        ]
    }
}

javadoc {
    options {
        encoding = 'UTF-8'
        version = true
        author = true
         addMultilineStringsOption("-add-exports").setValue([
            'javafx.controls/com.sun.javafx.scene.control=org.jabref',
            'org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref'
        ])
    }
}

test {
    useJUnitPlatform {
        excludeTags 'DatabaseTest', 'FetcherTest', 'GUITest'
    }

    moduleOptions {
        // TODO: Remove this as soon as ArchUnit is modularized
        runOnClasspath = true
    }

    testLogging {
        // set options for log level LIFECYCLE
        // for debugging tests: add "STANDARD_OUT", "STANDARD_ERROR"
        events = ["FAILED"]
        exceptionFormat "full"
    }
}

testlogger {
    theme 'standard-parallel'
    showPassed false
    showSkipped false
}

task databaseTest(type: Test) {
    useJUnitPlatform {
        includeTags 'DatabaseTest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events = ["FAILED"]
        exceptionFormat "full"
    }
}

task fetcherTest(type: Test) {
    useJUnitPlatform {
        includeTags 'FetcherTest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events = ["FAILED"]
        exceptionFormat "full"
    }
}

task guiTest(type: Test) {
    useJUnitPlatform {
        includeTags 'GUITest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events = ["FAILED"]
        exceptionFormat "full"
    }
}

// Test result tasks
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.withType(Test) {
    reports.html.outputLocation.set(file("${reporting.baseDir}/${name}"))
}

task jacocoPrepare() {
    doFirst {
        // Ignore failures of tests
        tasks.withType(Test) {
            ignoreFailures = true
        }
    }
}
test.mustRunAfter jacocoPrepare
databaseTest.mustRunAfter jacocoPrepare
fetcherTest.mustRunAfter jacocoPrepare

jacocoTestReport {
    executionData files(
            "$buildDir/jacoco/test.exec",
            "$buildDir/jacoco/databaseTest.exec",
            "$buildDir/jacoco/fetcherTest.exec").filter { it.exists() }
    dependsOn jacocoPrepare, test, databaseTest, fetcherTest

    reports {
        csv.getRequired().set(true)
        html.getRequired().set(true)
        xml.getRequired().set(true) // coveralls plugin depends on xml format report
    }
}

// Code quality tasks
checkstyle {
    // will only run when called explicitly from the command line
    sourceSets = []
}

rewrite {
    activeRecipe(
        'org.jabref.config.rewrite.cleanup'
    )
    exclusion (
        "build.gradle",
        "buildSrc/build.gradle",
        "eclipse.gradle",
        "settings.gradle",
        "src-gen/**",
        "src/main/resources/**",
        "src/test/resources/**",
        "**/module-info.java",
        "**/*.py",
        "**/*.xml",
        "**/*.yml"
    )
    plainTextMask("**/*.md")
    failOnDryRunResults = true
}

modernizer {
    failOnViolations = false
    includeTestClasses = true
    exclusions = [
        'java/util/Optional.get:()Ljava/lang/Object;'
    ]
}

// Release tasks
task deleteInstallerTemp(type: Delete) {
    delete "$buildDir/installer"
}

jpackage.dependsOn deleteInstallerTemp
jlink {
    addOptions('--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages')
    launcher {
        name = 'JabRef'
    }

    addOptions("--bind-services")

    // TODO: Remove the following as soon as the dependencies are fixed (upstream)
    // forceMerge is usually needed when some non-modular artifacts in the dependency graph use code that was previously part of the JDK
    // but it was removed in the newer releases.
    // The pom.xml associated with such a non-modular artifact does not mention that the artifact depends on the removed code
    // (because the artifact was published when this code was still available in the JDK).
    forceMerge "javafx"
    forceMerge "controlsfx", "bcprov", "jaxb", "istack", "stax", "log4j"

    // TODO: Remove the following correction to the merged module
    // The module descriptor automatically generated by the plugin for the merged module contained some invalid entries.
    // Execute ./gradlew suggestMergedModuleInfo and include the suggested directives here.
    mergedModule {
        requires 'java.compiler'
        requires 'java.datatransfer'
        requires 'java.desktop'
        requires 'java.logging'
        requires 'java.management'
        requires 'java.naming'
        requires 'java.net.http'
        requires 'java.scripting'
        requires 'java.security.jgss'
        requires 'java.security.sasl'
        requires 'java.sql'
        requires 'java.sql.rowset'
        requires 'java.transaction.xa'
        requires 'java.rmi'
        requires 'java.xml'
        requires 'jdk.jsobject'
        requires 'jdk.unsupported'
        requires 'jdk.unsupported.desktop'
        requires 'jdk.security.jgss'
        requires 'jdk.xml.dom'
        requires 'com.google.gson'
        requires 'org.slf4j'
        requires 'jakarta.xml.bind'
        uses 'org.mariadb.jdbc.credential.CredentialPlugin'
        uses 'org.mariadb.jdbc.authentication.AuthenticationPlugin'
        uses 'org.mariadb.jdbc.tls.TlsSocketPlugin'
        uses 'org.mariadb.jdbc.LocalInfileInterceptor'
        uses 'org.eclipse.jgit.transport.SshSessionFactory'
        uses 'org.eclipse.jgit.lib.GpgSigner'
        provides 'org.mariadb.jdbc.tls.TlsSocketPlugin' with 'org.mariadb.jdbc.internal.protocol.tls.DefaultTlsSocketPlugin'
        provides 'java.sql.Driver' with 'org.postgresql.Driver'
        provides 'org.mariadb.jdbc.authentication.AuthenticationPlugin' with 'org.mariadb.jdbc.internal.com.send.authentication.CachingSha2PasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.ClearPasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.Ed25519PasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.NativePasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.OldPasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.SendGssApiAuthPacket',
                'org.mariadb.jdbc.internal.com.send.authentication.SendPamAuthPacket',
                'org.mariadb.jdbc.internal.com.send.authentication.Sha256PasswordPlugin'
        provides 'org.mariadb.jdbc.credential.CredentialPlugin' with 'org.mariadb.jdbc.credential.aws.AwsIamCredentialPlugin',
                'org.mariadb.jdbc.credential.env.EnvCredentialPlugin',
                'org.mariadb.jdbc.credential.system.PropertiesCredentialPlugin'
        provides 'java.security.Provider' with 'org.bouncycastle.jce.provider.BouncyCastleProvider',
                'org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider'
    }

    jpackage {
        outputDir = "distribution"

        if (OperatingSystem.current().isWindows()) {
            // This requires WiX to be installed: https://github.com/wixtoolset/wix3/releases
            installerType = "msi"
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/jabref.ico",
            ]
            installerOptions = [
                    '--vendor', 'JabRef',
                    '--app-version', "${project.version}",
                    '--verbose',
                    '--win-upgrade-uuid', 'd636b4ee-6f10-451e-bf57-c89656780e36',
                    '--win-dir-chooser',
                    '--win-shortcut',
                    '--win-menu',
                    '--win-menu-group', "JabRef",
                    '--temp', "$buildDir/installer",
                    '--resource-dir', "${projectDir}/buildres/windows",
                    '--file-associations', "${projectDir}/buildres/windows/bibtexAssociations.properties"
            ]
        }

        if (OperatingSystem.current().isLinux()) {
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/JabRef-icon-64.png",
                    '--app-version', "${project.version}",
            ]
            installerOptions = [
                    '--verbose',
                    '--vendor', 'JabRef',
                    '--app-version', "${project.version}",
                    // '--temp', "$buildDir/installer",
                    '--resource-dir', "${projectDir}/buildres/linux",
                    '--linux-menu-group', 'Office;',
                    '--linux-rpm-license-type', 'MIT',
                    // '--license-file', "${projectDir}/LICENSE.md",
                    '--description', 'JabRef is an open source bibliography reference manager. The native file format used by JabRef is BibTeX, the standard LaTeX bibliography format.',
                    '--linux-shortcut',
                    '--file-associations', "${projectDir}/buildres/linux/bibtexAssociations.properties"
            ]
        }

        if (OperatingSystem.current().isMacOsX()) {
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/jabref.icns",
                    '--resource-dir', "${projectDir}/buildres/mac"
            ]
            // Due to a signing bug in jpackage we have to first resign the created app and therefore build the dmg manually
            // See https://bugs.openjdk.java.net/browse/JDK-8251892 for details
            skipInstaller = true
            installerOptions = [
                    '--verbose',
                    '--vendor', 'JabRef',
                    '--mac-package-identifier', "JabRef",
                    '--mac-package-name', "JabRef",
                    '--app-version', "${project.version}",
                    '--file-associations', "${projectDir}/buildres/mac/bibtexAssociations.properties",
                    '--resource-dir', "${projectDir}/buildres/mac"
            ]
        }
    }
}

if (OperatingSystem.current().isWindows()) {
    tasks.jpackageImage.doLast {
        copy {
            from("${projectDir}/buildres/windows") {
                include "jabref-firefox.json", "jabref-chrome.json", "JabRefHost.bat", "JabRefHost.ps1"
            }
            into "$buildDir/distribution/JabRef"
        }
    }
}

if (OperatingSystem.current().isLinux()) {
    tasks.jpackageImage.doLast {
        copy {
            from("${projectDir}/buildres/linux") {
                include "native-messaging-host/**", "jabrefHost.py"
            }
            into "$buildDir/distribution/JabRef/lib"
        }
    }
}

if (OperatingSystem.current().isMacOsX()) {
    tasks.jpackageImage.doLast {
        copy {
            from("${projectDir}/buildres/mac") {
                include "native-messaging-host/**", "jabrefHost.py"
            }
            into "$buildDir/distribution/JabRef.app/Contents/Resources"
        }
    }
}
jmh {
    warmupIterations = 5
    iterations = 10
    fork = 2
}

// Source: https://stackoverflow.com/a/44168582/873282
task downloadDependencies {
    description "Pre-downloads *most* dependencies"
    doLast {
        configurations.getAsMap().each { name, config ->
            println "Retrieving dependencies for $name"
            try {
                config.files
            } catch (e) {
                // some cannot be resolved, just log them
                project.logger.info e.message
            }
        }
    }
}
