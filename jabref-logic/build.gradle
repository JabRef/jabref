import org.jabref.build.xjc.XjcPlugin
import org.jabref.build.xjc.XjcTask

plugins {
    id 'com.zyxist.chainsaw'
}

apply plugin: 'java'
apply plugin: org.jabref.build.antlr.AntlrPlugin
apply plugin: XjcPlugin

sourceSets.main.java.srcDirs += "src/main/gen"
sourceSets.main.resources.srcDirs += "src/main/java"

repositories {
    mavenLocal()
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

// FIXME: bug in chainsaw does not build multi module projects in right order
compileJava.dependsOn ":jabref-model:assemble"
compileTestJava.dependsOn ":jabref-testutils:assemble"

dependencies {
    compile project(':jabref-model')

    // Include all jar-files in the 'lib' folder as dependencies
    compile fileTree(dir: '../lib', includes: ['*.jar'])

    compile 'io.github.java-diff-utils:java-diff-utils:2.2.0'
    compile 'info.debatty:java-string-similarity:1.1.0'

    antlr3 'org.antlr:antlr:3.5.2'
    compile 'org.antlr:antlr-runtime:3.5.2'

    // VersionEye states that 6.0.5 is the most recent version, but http://dev.mysql.com/downloads/connector/j/ shows that as "Development Release"
    compile 'mysql:mysql-connector-java:5.1.46'

    compile 'org.postgresql:postgresql:42.2.4'

    // JavaFX stuff
    compile 'de.jensd:fontawesomefx-materialdesignfont:1.7.22-4'
    compile 'de.jensd:fontawesomefx-commons:9.1.2'

    // >1.8.0-beta is required for java 9 compatibility
    compile 'org.slf4j:slf4j-api:1.8.0-beta2'
    compile 'org.apache.logging.log4j:log4j-api:2.11.0'
    compile 'org.apache.logging.log4j:log4j-core:2.11.0'

    compile 'org.jsoup:jsoup:1.11.3'
    compile 'com.mashape.unirest:unirest-java:1.4.9'

    compile 'de.undercouch:citeproc-java:1.0.1'

    // JAX-B is considered JavaEE API and is no longer part of JavaSE (JDK 9)
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'

    xjc "com.sun.xml.bind:jaxb-xjc:2.2.4-1"


    testCompile project(':jabref-testutils')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.2.0'
    testCompile 'org.junit.platform:junit-platform-launcher:1.2.0'
    testCompile 'org.junit-pioneer:junit-pioneer:0.1.2'
    testRuntime 'org.apache.logging.log4j:log4j-core:2.11.0'
    testRuntime 'org.apache.logging.log4j:log4j-jul:2.11.0'
    testCompile 'org.mockito:mockito-core:2.20.0'
    testCompile 'com.github.tomakehurst:wiremock:2.18.0'
    testCompile 'org.assertj:assertj-swing-junit:3.8.0'
    testCompile 'org.reflections:reflections:0.9.11'
    testCompile 'org.xmlunit:xmlunit-core:2.6.0'
    testCompile 'org.xmlunit:xmlunit-matchers:2.6.0'
    testCompile 'com.tngtech.archunit:archunit-junit:0.8.3'
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit5:4.0.+"
}

processResources {
    filteringCharset = 'UTF-8'

    filesMatching("build.properties") {
        expand(version: project.version,
                "year": String.valueOf(Calendar.getInstance().get(Calendar.YEAR)),
                "authors": new File('AUTHORS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "developers": new File('DEVELOPERS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "azureInstrumentationKey": System.getenv('AzureInstrumentationKey'),
                "minRequiredJavaVersion": minRequiredJavaVersion,
                "allowJava9": allowJava9
        )
        filteringCharset = 'UTF-8'
    }
}

compileJava.dependsOn "generateSource"

task generateSource(dependsOn: ["generateBstGrammarSource",
                                "generateMedlineSource",
                                "generateBibtexmlSource",
                                "generateEndnoteSource",
                                "generateModsSource"]) {
    group = 'JabRef'
    description 'Generates all Java source files.'
}

task generateBstGrammarSource(type: org.jabref.build.antlr.AntlrTask) {
    group = "JabRef"
    description = 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.'
    antlr = ANTLR3
    inputFile = 'src/main/antlr3/org/jabref/bst/Bst.g'
    outputDir = 'src/main/gen/org/jabref/logic/bst/'
}

task generateMedlineSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the medline importer."
    schemaFile = "src/main/resources/xjc/medline/medline.xsd"
    outputDirectory = "src/main/gen/"
    javaPackage = "org.jabref.logic.importer.fileformat.medline"
}

task generateBibtexmlSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the bibtexml importer."
    schemaFile = "src/main/resources/xjc/bibtexml/bibtexml.xsd"
    outputDirectory = "src/main/gen"
    javaPackage = "org.jabref.logic.importer.fileformat.bibtexml"
}

task generateEndnoteSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the endnote importer."
    schemaFile = "src/main/resources/xjc/endnote/RSXML.dtd"
    outputDirectory = "src/main/gen/"
    javaPackage = "org.jabref.logic.importer.fileformat.endnote"
    arguments = '-dtd'
}

task generateModsSource(type: XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the mods importer."
    schemaFile = "src/main/resources/xjc/mods/mods-3-7.xsd"
    bindingFile = "src/main/resources/xjc/mods/mods-binding.xjb"
    outputDirectory = "src/main/gen/"
    javaPackage = "org.jabref.logic.importer.fileformat.mods"
    arguments = '-npa'
}

