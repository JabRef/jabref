import org.gradle.internal.os.OperatingSystem
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.jabref.build.xjc.XjcPlugin
import org.jabref.build.xjc.XjcTask

plugins {
    id 'org.beryx.jlink' version '3.1.1'
}

// Enable following for debugging
// gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.

apply plugin: XjcPlugin

apply from: 'eclipse.gradle'

group = "org.jabref"
version = project.findProperty('projVersion') ?: '100.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_23
    targetCompatibility = JavaVersion.VERSION_23

    // Workaround needed for Eclipse, probably because of https://github.com/gradle/gradle/issues/16922
    // Should be removed as soon as Gradle 7.0.1 is released ( https://github.com/gradle/gradle/issues/16922#issuecomment-828217060 )
    modularity.inferModulePath.set(false)

    toolchain {
        ## ported ##
    }
}

sourceSets {
    main {
        java {
            // src-gen reasoning: https://stackoverflow.com/a/64612308/873282
            srcDirs = ["src/main/java", "src-gen/main/java"]
        }
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://oss.sonatype.org/content/groups/public' }

    // Required for one.jpro.jproutils:tree-showing
    maven { url = 'https://sandec.jfrog.io/artifactory/repo' }
}

dependencyLocking {
    lockAllConfigurations()
}

javafx {
    version = "24"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing' ]
}

jacoco {
    toolVersion = "0.8.13"
}

dependencies {
    implementation 'commons-cli:commons-cli:1.9.0'



    // jakarta.activation is already dependency of glassfish
    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.2'
    implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.3'


    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation "org.hamcrest:hamcrest-library:3.0"
    testImplementation "com.github.javaparser:javaparser-symbol-solver-core:3.26.4"

    // recommended by https://github.com/wiremock/wiremock/issues/2149#issuecomment-1835775954
    testImplementation 'org.wiremock:wiremock-standalone:3.12.1'
}

clean {
    delete "src/main/generated"
    delete "src-gen"
}

processResources {
    filteringCharset = 'UTF-8'

    filesMatching("build.properties") {
        expand(version: project.findProperty('projVersionInfo') ?: '100.0.0',
                "year": String.valueOf(Calendar.getInstance().get(Calendar.YEAR)),
                "maintainers": new File('MAINTAINERS').readLines().findAll { !it.startsWith("#") }.join(", "),
                "azureInstrumentationKey": System.getenv('AzureInstrumentationKey') ? System.getenv('AzureInstrumentationKey') : '',
                "springerNatureAPIKey": System.getenv('SpringerNatureAPIKey') ? System.getenv('SpringerNatureAPIKey') : '',
                "astrophysicsDataSystemAPIKey": System.getenv('AstrophysicsDataSystemAPIKey') ? System.getenv('AstrophysicsDataSystemAPIKey') : '',
                "ieeeAPIKey": System.getenv('IEEEAPIKey') ? System.getenv('IEEEAPIKey') : '',
                "scienceDirectApiKey": System.getenv('SCIENCEDIRECTAPIKEY') ? System.getenv('SCIENCEDIRECTAPIKEY') : '',
                "biodiversityHeritageApiKey": System.getenv('BiodiversityHeritageApiKey') ? System.getenv('BiodiversityHeritageApiKey') : '',
                "semanticScholarApiKey": System.getenv('SemanticScholarApiKey') ? System.getenv("SemanticScholarApiKey") : ''
        )
        filteringCharset = 'UTF-8'
    }

    filesMatching(["resources/resource/ods/meta.xml", "resources/resource/openoffice/meta.xml"]) {
        expand version: project.version
    }
}

tasks.register('generateSource') {
    dependsOn("generateBstGrammarSource",
            "generateSearchGrammarSource",
            "generateLtwaGrammarSource",
            "generateCitaviSource")
    group = 'JabRef'
    description = 'Generates all necessary (Java) source files.'
}

tasks.register("generateBstGrammarSource", JavaExec) {
    group = "JabRef"
    description = 'Generates BstLexer.java and BstParser.java from the Bst.g4 grammar file using antlr4.'
    classpath = configurations.antlr4
    mainClass = "org.antlr.v4.Tool"
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))

    inputs.dir('src/main/antlr4/org/jabref/bst/')
    outputs.dir("src-gen/main/java/org/jabref/logic/bst/")
    args = ["-o", "src-gen/main/java/org/jabref/logic/bst/", "-visitor", "-no-listener", "-package", "org.jabref.logic.bst", "$projectDir/src/main/antlr4/org/jabref/bst/Bst.g4"]
}

tasks.register("generateSearchGrammarSource", JavaExec) {
    group = 'JabRef'
    description = "Generates java files for Search.g4 antlr4."
    classpath = configurations.antlr4
    mainClass = "org.antlr.v4.Tool"
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))

    inputs.dir("src/main/antlr4/org/jabref/search/")
    outputs.dir("src-gen/main/java/org/jabref/search/")
    args  = ["-o","src-gen/main/java/org/jabref/search" , "-visitor", "-no-listener", "-package", "org.jabref.search", "$projectDir/src/main/antlr4/org/jabref/search/Search.g4"]
}

tasks.register("generateLtwaGrammarSource", JavaExec) {
    group = "JabRef"
    description = 'Generates LtwaLexer.java and LtwaParser.java from the Ltwa.g4 grammar file using antlr4.'
    classpath = configurations.antlr4
    mainClass = "org.antlr.v4.Tool"
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))

    inputs.dir('src/main/antlr4/org/jabref/ltwa/')
    outputs.dir("src-gen/main/java/org/jabref/logic/journals/ltwa/")
    args = ["-o", "src-gen/main/java/org/jabref/logic/journals/ltwa/", "-no-visitor", "-listener", "-package", "org.jabref.logic.journals.ltwa", "$projectDir/src/main/antlr4/org/jabref/ltwa/Ltwa.g4"]
}

tasks.register("generateJournalListMV", JavaExec) {
    group = "JabRef"
    description = "Converts the comma-separated journal abbreviation file to a H2 MVStore"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "org.jabref.cli.JournalListMvGenerator"
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    onlyIf {
        !file("build/resources/main/journals/journal-list.mv").exists()
    }
}

jar.dependsOn("generateJournalListMV")
compileTestJava.dependsOn("generateJournalListMV")

tasks.register('downloadLtwaFile') {
    group = "JabRef"
    description = "Downloads the LTWA file for journal abbreviations"
    doLast {
        def ltwaUrl = "https://www.issn.org/wp-content/uploads/2021/07/ltwa_20210702.csv"
        def ltwaDir = file("build/resources/main/journals")
        def ltwaCsvFile = file("${ltwaDir}/ltwa_20210702.csv")

        if (!ltwaCsvFile.exists()) {
            mkdir(ltwaDir)
            ant.get(src: ltwaUrl, dest: ltwaCsvFile, verbose: true)
            logger.lifecycle("Downloaded LTWA file to ${ltwaCsvFile}")
        } else {
            logger.lifecycle("LTWA file already exists at ${ltwaCsvFile}")
        }
    }
    onlyIf {
        !file("build/resources/main/journals/ltwa_20210702.csv").exists()
    }
}

tasks.register('generateLtwaListMV', JavaExec) {
    group = "JabRef"
    description = "Converts the LTWA CSV file to a H2 MVStore"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "org.jabref.cli.LtwaListMvGenerator"
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    dependsOn('downloadLtwaFile')
    onlyIf {
        !file("build/resources/main/journals/ltwa-list.mv").exists()
    }
}

jar.dependsOn("generateLtwaListMV")
compileTestJava.dependsOn("generateLtwaListMV")

tasks.register('generateCitationStyleCatalog', JavaExec) {
    group = "JabRef"
    description = "Generates a catalog of all available citation styles"

    dependsOn 'processResources'

    classpath = sourceSets.main.runtimeClasspath

    mainClass = "org.jabref.logic.citationstyle.CitationStyleCatalogGenerator"
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

jar.dependsOn('generateCitationStyleCatalog')
compileTestJava.dependsOn("generateCitationStyleCatalog")

tasks.register('generateCitaviSource', XjcTask) {
    group = 'JabRef'
    description = "Generates java files for the citavi importer."

    schemaFile = "src/main/resources/xjc/citavi/citavi.xsd"
    outputDirectory = "src-gen/main/java/"
    javaPackage = "org.jabref.logic.importer.fileformat.citavi"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    // hint by https://docs.gradle.org/current/userguide/performance.html#run_the_compiler_as_a_separate_process
    options.fork = true
}

compileJava {
    options.compilerArgs << "-Xlint:none"
    dependsOn "generateSource"

    options.generatedSourceOutputDirectory.set(file("src-gen/main/java"))

    moduleOptions {
        addExports = [
                // TODO: Remove access to internal api
                'javafx.controls/com.sun.javafx.scene.control' : 'org.jabref',
                'org.controlsfx.controls/impl.org.controlsfx.skin' : 'org.jabref'
        ]
    }
}

// Configures "application > run" task
run {
    doFirst {
        // Clear the default JVM arguments, to avoid messages like "WARNING: Unknown module: org.jabref.merged.module specified to --add-exports"
        application.applicationDefaultJvmArgs = []
    }

    moduleOptions {
        // On a change here, also adapt "application > applicationDefaultJvmArgs"
        addExports = [
                // TODO: Remove access to internal api
                'javafx.base/com.sun.javafx.event' : 'org.jabref.merged.module',
                'javafx.controls/com.sun.javafx.scene.control' : 'org.jabref',

                // We need to restate the ControlsFX exports, because we get following error otherwise:
                //   java.lang.IllegalAccessError:
                //     class org.controlsfx.control.textfield.AutoCompletionBinding (in module org.controlsfx.controls)
                //     cannot access class com.sun.javafx.event.EventHandlerManager (in module javafx.base) because
                //     module javafx.base does not export com.sun.javafx.event to module org.controlsfx.controls
                // Taken from here: https://github.com/controlsfx/controlsfx/blob/9.0.0/build.gradle#L1
                'javafx.graphics/com.sun.javafx.scene' : 'org.controlsfx.controls',
                'javafx.graphics/com.sun.javafx.scene.traversal' : 'org.controlsfx.controls',
                'javafx.graphics/com.sun.javafx.css' : 'org.controlsfx.controls',
                'javafx.controls/com.sun.javafx.scene.control' : 'org.controlsfx.controls',
                'javafx.controls/com.sun.javafx.scene.control.behavior' : 'org.controlsfx.controls',
                'javafx.controls/com.sun.javafx.scene.control.inputmap' : 'org.controlsfx.controls',
                'javafx.base/com.sun.javafx.event' : 'org.controlsfx.controls',
                'javafx.base/com.sun.javafx.collections' : 'org.controlsfx.controls',
                'javafx.base/com.sun.javafx.runtime': 'org.controlsfx.controls',
                'javafx.web/com.sun.webkit' : 'org.controlsfx.controls',
        ]

        addOpens = [
                'javafx.controls/javafx.scene.control' : 'org.jabref',
                'javafx.controls/com.sun.javafx.scene.control' : 'org.jabref',
                'org.controlsfx.controls/impl.org.controlsfx.skin' : 'org.jabref',
                'org.controlsfx.controls/org.controlsfx.control.textfield' : 'org.jabref',

                'javafx.controls/javafx.scene.control.skin' : 'org.controlsfx.controls',
                'javafx.graphics/javafx.scene' : 'org.controlsfx.controls',

                'javafx.base/javafx.collections' : 'org.jabref',
                'javafx.base/javafx.collections.transformation' : 'org.jabref'
        ]

        addModules = [
                'jdk.incubator.vector'
        ]

        createCommandLineArgumentFile = true
    }

    if (project.hasProperty('component')){
        if (component == 'httpserver'){
            main = 'org.jabref.http.server.Server'
        }
    }
}

javadoc {
    options {
        encoding = 'UTF-8'
        version = false
        author = false
        addMultilineStringsOption("-add-exports").setValue([
            'javafx.controls/com.sun.javafx.scene.control=org.jabref',
            'org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref'
        ])
    }
}

test {
    useJUnitPlatform {
        excludeTags 'DatabaseTest', 'FetcherTest', 'GUITest'
    }

    moduleOptions {
        // TODO: Remove this as soon as ArchUnit is modularized
        runOnClasspath = true
    }
}

testlogger {
    // See https://github.com/radarsh/gradle-test-logger-plugin#configuration for configuration options

    theme = 'standard'

    showPassed = false
    showSkipped = false

    showCauses = false
    showStackTraces = false
}

tasks.withType(Test).configureEach {
    reports.html.outputLocation.set(file("${reporting.baseDirectory}/${name}"))
    // Enable parallel tests (on desktop).
    // See https://docs.gradle.org/8.1/userguide/performance.html#execute_tests_in_parallel for details.
    if (!providers.environmentVariable("CI").isPresent()) {
        maxParallelForks = Math.max(Runtime.runtime.availableProcessors() - 1, 1)
    }
}

tasks.register('databaseTest', Test) {
    useJUnitPlatform {
        includeTags 'DatabaseTest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events = ["FAILED"]
        exceptionFormat = "full"
    }

    maxParallelForks = 1
}

tasks.register('fetcherTest', Test) {
    useJUnitPlatform {
        includeTags 'FetcherTest'
    }

    maxParallelForks = 1
}

tasks.register('guiTest', Test) {
    useJUnitPlatform {
        includeTags 'GUITest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events = ["FAILED"]
        exceptionFormat = "full"
    }

    maxParallelForks = 1
}

// Test result tasks
tasks.register('copyTestResources', Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.register('jacocoPrepare') {
    doFirst {
        // Ignore failures of tests
        tasks.withType(Test).tap {
            configureEach {
                ignoreFailures = true
            }
        }
    }
}
test.mustRunAfter jacocoPrepare
databaseTest.mustRunAfter jacocoPrepare
fetcherTest.mustRunAfter jacocoPrepare

jacocoTestReport {
    dependsOn jacocoPrepare, test, fetcherTest, databaseTest

    executionData files(
            layout.buildDirectory.file('jacoco/test.exec').get().asFile,
            layout.buildDirectory.file('jacoco/fetcherTest.exec').get().asFile,
            layout.buildDirectory.file('jacoco/databaseTest.exec').get().asFile)

    reports {
        csv.required = true
        html.required = true
        // coveralls plugin depends on xml format report
        xml.required = true
    }
}

// Code quality tasks
checkstyle {
    // will only run when called explicitly from the command line
    sourceSets = []
}

rewrite {
    activeRecipe(
        'org.jabref.config.rewrite.cleanup'
    )
    exclusion (
        "build.gradle",
        "buildSrc/build.gradle",
        "eclipse.gradle",
        "settings.gradle",
        "src-gen/**",
        "src/main/resources/**",
        "src/test/resources/**",
        "**/module-info.java",
        "**/*.py",
        "**/*.xml",
        "**/*.yml"
    )
    plainTextMask("**/*.md")
    failOnDryRunResults = true
}

modernizer {
    failOnViolations = false
    includeTestClasses = true
    exclusions = [
        'java/util/Optional.get:()Ljava/lang/Object;'
    ]
}

// Release tasks
tasks.register('deleteInstallerTemp', Delete) {
    delete "$buildDir/installer"
}

jpackage.dependsOn deleteInstallerTemp
jlinkZip.dependsOn jpackage
jlink {
    // https://github.com/beryx/badass-jlink-plugin/issues/61#issuecomment-504640018
    addExtraDependencies("javafx")

    // We keep debug statements - otherwise '--strip-debug' would be included
    addOptions('--compress', 'zip-6', '--no-header-files', '--no-man-pages')
    launcher {
        name = 'JabRef'
    }

    addOptions("--bind-services")

    // TODO: Remove the following as soon as the dependencies are fixed (upstream)
    // forceMerge is usually needed when some non-modular artifacts in the dependency graph use code that was previously part of the JDK
    // but it was removed in the newer releases.
    // The pom.xml associated with such a non-modular artifact does not mention that the artifact depends on the removed code
    // (because the artifact was published when this code was still available in the JDK).
    forceMerge "controlsfx", "bcprov", "jaxb", "istack", "stax"

    // TODO: Remove the following correction to the merged module
    // The module descriptor automatically generated by the plugin for the merged module contained some invalid entries.
    // This is based on ./gradlew suggestMergedModuleInfo, sort, strip ";"", remove non-used modules, and include the suggested directives here.
    mergedModule {
        requires 'com.google.gson'
        requires 'com.fasterxml.jackson.annotation'
        requires 'com.fasterxml.jackson.databind'
        requires 'com.fasterxml.jackson.core'
        requires 'com.fasterxml.jackson.datatype.jdk8'
        requires 'jakarta.xml.bind'
        requires 'java.compiler'
        requires 'java.datatransfer'
        requires 'java.desktop'
        requires 'java.logging'
        requires 'java.management'
        requires 'java.naming'
        requires 'java.net.http'
        requires 'java.rmi'
        requires 'java.scripting'
        requires 'java.security.jgss'
        requires 'java.security.sasl'
        requires 'java.sql'
        requires 'java.sql.rowset'
        requires 'java.transaction.xa'
        requires 'java.xml'
        requires 'javafx.base'
        requires 'javafx.controls'
        requires 'javafx.fxml'
        requires 'javafx.graphics'
        requires 'javafx.media'
        requires 'javafx.swing'
        requires 'jdk.jsobject'
        requires 'jdk.security.jgss'
        requires 'jdk.unsupported'
        requires 'jdk.unsupported.desktop'
        requires 'jdk.xml.dom'
        requires 'org.apache.commons.lang3'
        requires 'org.apache.commons.logging'
        requires 'org.apache.commons.text'
        requires 'org.apache.commons.codec'
        requires 'org.apache.commons.io'
        requires 'org.apache.commons.compress'
        requires 'org.freedesktop.dbus'
        requires 'org.jsoup'
        requires 'org.slf4j'
        requires 'org.tukaani.xz';
        uses 'ai.djl.engine.EngineProvider'
        uses 'ai.djl.repository.RepositoryFactory'
        uses 'ai.djl.repository.zoo.ZooProvider'
        uses 'dev.langchain4j.spi.prompt.PromptTemplateFactory'
        uses 'kong.unirest.core.json.JsonEngine'
        uses 'org.eclipse.jgit.lib.Signer'
        uses 'org.eclipse.jgit.transport.SshSessionFactory'
        uses 'org.mariadb.jdbc.LocalInfileInterceptor'
        uses 'org.mariadb.jdbc.authentication.AuthenticationPlugin'
        uses 'org.mariadb.jdbc.credential.CredentialPlugin'
        uses 'org.mariadb.jdbc.tls.TlsSocketPlugin'
        uses 'org.postgresql.shaded.com.ongres.stringprep.Profile'

        provides 'org.mariadb.jdbc.tls.TlsSocketPlugin' with 'org.mariadb.jdbc.internal.protocol.tls.DefaultTlsSocketPlugin'
        provides 'java.sql.Driver' with 'org.postgresql.Driver'
        provides 'org.mariadb.jdbc.authentication.AuthenticationPlugin' with 'org.mariadb.jdbc.internal.com.send.authentication.CachingSha2PasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.ClearPasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.Ed25519PasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.NativePasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.OldPasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.SendGssApiAuthPacket',
                'org.mariadb.jdbc.internal.com.send.authentication.SendPamAuthPacket',
                'org.mariadb.jdbc.internal.com.send.authentication.Sha256PasswordPlugin'
        provides 'org.mariadb.jdbc.credential.CredentialPlugin' with 'org.mariadb.jdbc.credential.aws.AwsIamCredentialPlugin',
                'org.mariadb.jdbc.credential.env.EnvCredentialPlugin',
                'org.mariadb.jdbc.credential.system.PropertiesCredentialPlugin'
        provides 'java.security.Provider' with 'org.bouncycastle.jce.provider.BouncyCastleProvider',
                'org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider'
        provides 'kong.unirest.core.json.JsonEngine' with 'kong.unirest.modules.gson.GsonEngine';
        provides 'ai.djl.repository.zoo.ZooProvider' with 'ai.djl.engine.rust.zoo.RsZooProvider',
                                    'ai.djl.huggingface.zoo.HfZooProvider',
                                    'ai.djl.pytorch.zoo.PtZooProvider',
                                    'ai.djl.repository.zoo.DefaultZooProvider';
        provides 'ai.djl.engine.EngineProvider' with 'ai.djl.engine.rust.RsEngineProvider',
                                    'ai.djl.pytorch.engine.PtEngineProvider';
    }

    jpackage {
        outputDir = "distribution"

        if (OperatingSystem.current().isWindows()) {
            // This requires WiX to be installed: https://github.com/wixtoolset/wix3/releases
            installerType = "msi"
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/jabref.ico",
            ]
            installerOptions = [
                    '--vendor', 'JabRef',
                    '--app-version', "${project.version}",
                    '--verbose',
                    '--win-upgrade-uuid', 'd636b4ee-6f10-451e-bf57-c89656780e36',
                    '--win-dir-chooser',
                    '--win-shortcut',
                    '--win-menu',
                    '--win-menu-group', "JabRef",
                    '--temp', "$buildDir/installer",
                    '--resource-dir', "${projectDir}/buildres/windows",
                    '--license-file', "${projectDir}/buildres/LICENSE_with_Privacy.md",
                    '--file-associations', "${projectDir}/buildres/windows/bibtexAssociations.properties"
            ]
        }

        if (OperatingSystem.current().isLinux()) {
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/JabRef-linux-icon-64.png",
                    '--app-version', "${project.version}",
            ]
            installerOptions = [
                    '--verbose',
                    '--vendor', 'JabRef',
                    '--app-version', "${project.version}",
                    // '--temp', "$buildDir/installer",
                    '--resource-dir', "${projectDir}/buildres/linux",
                    '--linux-menu-group', 'Office;',
                    '--linux-rpm-license-type', 'MIT',
                    // '--license-file', "${projectDir}/LICENSE.md",
                    '--description', 'JabRef is an open source bibliography reference manager. The native file format used by JabRef is BibTeX, the standard LaTeX bibliography format.',
                    '--linux-shortcut',
                    '--file-associations', "${projectDir}/buildres/linux/bibtexAssociations.properties"
            ]
        }

        if (OperatingSystem.current().isMacOsX()) {
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/jabref.icns",
                    '--resource-dir', "${projectDir}/buildres/mac"
            ]
            // Notarized mac images and packages are built on the pipeline only
            skipInstaller = true
            installerOptions = [
                    '--verbose',
                    '--vendor', 'JabRef',
                    '--mac-package-identifier', "JabRef",
                    '--mac-package-name', "JabRef",
                    '--app-version', "${project.version}",
                    '--file-associations', "${projectDir}/buildres/mac/bibtexAssociations.properties",
                    '--resource-dir', "${projectDir}/buildres/mac"
            ]
        }
    }
}

if (OperatingSystem.current().isWindows()) {
    tasks.jpackageImage.doLast {
        copy {
            from("${projectDir}/buildres/windows") {
                include "jabref-firefox.json", "jabref-chrome.json", "JabRefHost.bat", "JabRefHost.ps1"
            }
            into "$buildDir/distribution/JabRef"
        }
    }
}

if (OperatingSystem.current().isLinux()) {
    tasks.jpackageImage.doLast {
        copy {
            from("${projectDir}/buildres/linux") {
                include "native-messaging-host/**", "jabrefHost.py"
            }
            into "$buildDir/distribution/JabRef/lib"
        }
    }
}

if (OperatingSystem.current().isMacOsX()) {
    tasks.jpackageImage.doLast {
        copy {
            from("${projectDir}/buildres/mac") {
                include "native-messaging-host/**", "jabrefHost.py"
            }
            into "$buildDir/distribution/JabRef.app/Contents/Resources"
        }
    }
}

jmh {
    warmupIterations = 5
    iterations = 10
    fork = 2
    zip64 = true
}

requirementTracing {
    inputDirectories = files('docs', 'src/main/java', 'src/test/java')
}
