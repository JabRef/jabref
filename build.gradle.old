tasks.register('databaseTest', Test) {
    useJUnitPlatform {
        includeTags 'DatabaseTest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events = ["FAILED"]
        exceptionFormat = "full"
    }

    maxParallelForks = 1
}

tasks.register('fetcherTest', Test) {
    useJUnitPlatform {
        includeTags 'FetcherTest'
    }

    maxParallelForks = 1
}

tasks.register('guiTest', Test) {
    useJUnitPlatform {
        includeTags 'GUITest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events = ["FAILED"]
        exceptionFormat = "full"
    }

    maxParallelForks = 1
}

// Test result tasks
tasks.register('copyTestResources', Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

tasks.register('jacocoPrepare') {
    doFirst {
        // Ignore failures of tests
        tasks.withType(Test).tap {
            configureEach {
                ignoreFailures = true
            }
        }
    }
}
test.mustRunAfter jacocoPrepare
databaseTest.mustRunAfter jacocoPrepare
fetcherTest.mustRunAfter jacocoPrepare

jacocoTestReport {
    dependsOn jacocoPrepare, test, fetcherTest, databaseTest

    executionData files(
            layout.buildDirectory.file('jacoco/test.exec').get().asFile,
            layout.buildDirectory.file('jacoco/fetcherTest.exec').get().asFile,
            layout.buildDirectory.file('jacoco/databaseTest.exec').get().asFile)

    reports {
        csv.required = true
        html.required = true
        // coveralls plugin depends on xml format report
        xml.required = true
    }
}

// Code quality tasks
checkstyle {
    // will only run when called explicitly from the command line
    sourceSets = []
}

rewrite {
    activeRecipe(
        'org.jabref.config.rewrite.cleanup'
    )
    exclusion (
        "build.gradle",
        "buildSrc/build.gradle",
        "eclipse.gradle",
        "settings.gradle",
        "src-gen/**",
        "src/main/resources/**",
        "src/test/resources/**",
        "**/module-info.java",
        "**/*.py",
        "**/*.xml",
        "**/*.yml"
    )
    plainTextMask("**/*.md")
    failOnDryRunResults = true
}

modernizer {
    failOnViolations = false
    includeTestClasses = true
    exclusions = [
        'java/util/Optional.get:()Ljava/lang/Object;'
    ]
}

// Release tasks
tasks.register('deleteInstallerTemp', Delete) {
    delete "$buildDir/installer"
}

jpackage.dependsOn deleteInstallerTemp
jlinkZip.dependsOn jpackage
jlink {
    // https://github.com/beryx/badass-jlink-plugin/issues/61#issuecomment-504640018
    addExtraDependencies("javafx")

    // We keep debug statements - otherwise '--strip-debug' would be included
    addOptions('--compress', 'zip-6', '--no-header-files', '--no-man-pages')
    launcher {
        name = 'JabRef'
    }

    addOptions("--bind-services")

    // TODO: Remove the following as soon as the dependencies are fixed (upstream)
    // forceMerge is usually needed when some non-modular artifacts in the dependency graph use code that was previously part of the JDK
    // but it was removed in the newer releases.
    // The pom.xml associated with such a non-modular artifact does not mention that the artifact depends on the removed code
    // (because the artifact was published when this code was still available in the JDK).
    forceMerge "controlsfx", "bcprov", "jaxb", "istack", "stax"

    // TODO: Remove the following correction to the merged module
    // The module descriptor automatically generated by the plugin for the merged module contained some invalid entries.
    // This is based on ./gradlew suggestMergedModuleInfo, sort, strip ";"", remove non-used modules, and include the suggested directives here.
    mergedModule {
        requires 'com.google.gson'
        requires 'com.fasterxml.jackson.annotation'
        requires 'com.fasterxml.jackson.databind'
        requires 'com.fasterxml.jackson.core'
        requires 'com.fasterxml.jackson.datatype.jdk8'
        requires 'jakarta.xml.bind'
        requires 'java.compiler'
        requires 'java.datatransfer'
        requires 'java.desktop'
        requires 'java.logging'
        requires 'java.management'
        requires 'java.naming'
        requires 'java.net.http'
        requires 'java.rmi'
        requires 'java.scripting'
        requires 'java.security.jgss'
        requires 'java.security.sasl'
        requires 'java.sql'
        requires 'java.sql.rowset'
        requires 'java.transaction.xa'
        requires 'java.xml'
        requires 'javafx.base'
        requires 'javafx.controls'
        requires 'javafx.fxml'
        requires 'javafx.graphics'
        requires 'javafx.media'
        requires 'javafx.swing'
        requires 'jdk.jsobject'
        requires 'jdk.security.jgss'
        requires 'jdk.unsupported'
        requires 'jdk.unsupported.desktop'
        requires 'jdk.xml.dom'
        requires 'org.apache.commons.lang3'
        requires 'org.apache.commons.logging'
        requires 'org.apache.commons.text'
        requires 'org.apache.commons.codec'
        requires 'org.apache.commons.io'
        requires 'org.apache.commons.compress'
        requires 'org.freedesktop.dbus'
        requires 'org.jsoup'
        requires 'org.slf4j'
        requires 'org.tukaani.xz';
        uses 'ai.djl.engine.EngineProvider'
        uses 'ai.djl.repository.RepositoryFactory'
        uses 'ai.djl.repository.zoo.ZooProvider'
        uses 'dev.langchain4j.spi.prompt.PromptTemplateFactory'
        uses 'kong.unirest.core.json.JsonEngine'
        uses 'org.eclipse.jgit.lib.Signer'
        uses 'org.eclipse.jgit.transport.SshSessionFactory'
        uses 'org.mariadb.jdbc.LocalInfileInterceptor'
        uses 'org.mariadb.jdbc.authentication.AuthenticationPlugin'
        uses 'org.mariadb.jdbc.credential.CredentialPlugin'
        uses 'org.mariadb.jdbc.tls.TlsSocketPlugin'
        uses 'org.postgresql.shaded.com.ongres.stringprep.Profile'

        provides 'org.mariadb.jdbc.tls.TlsSocketPlugin' with 'org.mariadb.jdbc.internal.protocol.tls.DefaultTlsSocketPlugin'
        provides 'java.sql.Driver' with 'org.postgresql.Driver'
        provides 'org.mariadb.jdbc.authentication.AuthenticationPlugin' with 'org.mariadb.jdbc.internal.com.send.authentication.CachingSha2PasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.ClearPasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.Ed25519PasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.NativePasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.OldPasswordPlugin',
                'org.mariadb.jdbc.internal.com.send.authentication.SendGssApiAuthPacket',
                'org.mariadb.jdbc.internal.com.send.authentication.SendPamAuthPacket',
                'org.mariadb.jdbc.internal.com.send.authentication.Sha256PasswordPlugin'
        provides 'org.mariadb.jdbc.credential.CredentialPlugin' with 'org.mariadb.jdbc.credential.aws.AwsIamCredentialPlugin',
                'org.mariadb.jdbc.credential.env.EnvCredentialPlugin',
                'org.mariadb.jdbc.credential.system.PropertiesCredentialPlugin'
        provides 'java.security.Provider' with 'org.bouncycastle.jce.provider.BouncyCastleProvider',
                'org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider'
        provides 'kong.unirest.core.json.JsonEngine' with 'kong.unirest.modules.gson.GsonEngine';
        provides 'ai.djl.repository.zoo.ZooProvider' with 'ai.djl.engine.rust.zoo.RsZooProvider',
                                    'ai.djl.huggingface.zoo.HfZooProvider',
                                    'ai.djl.pytorch.zoo.PtZooProvider',
                                    'ai.djl.repository.zoo.DefaultZooProvider';
        provides 'ai.djl.engine.EngineProvider' with 'ai.djl.engine.rust.RsEngineProvider',
                                    'ai.djl.pytorch.engine.PtEngineProvider';
    }

    jpackage {
        outputDir = "distribution"

        if (OperatingSystem.current().isWindows()) {
            // This requires WiX to be installed: https://github.com/wixtoolset/wix3/releases
            installerType = "msi"
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/jabref.ico",
            ]
            installerOptions = [
                    '--vendor', 'JabRef',
                    '--app-version', "${project.version}",
                    '--verbose',
                    '--win-upgrade-uuid', 'd636b4ee-6f10-451e-bf57-c89656780e36',
                    '--win-dir-chooser',
                    '--win-shortcut',
                    '--win-menu',
                    '--win-menu-group', "JabRef",
                    '--temp', "$buildDir/installer",
                    '--resource-dir', "${projectDir}/buildres/windows",
                    '--license-file', "${projectDir}/buildres/LICENSE_with_Privacy.md",
                    '--file-associations', "${projectDir}/buildres/windows/bibtexAssociations.properties"
            ]
        }

        if (OperatingSystem.current().isLinux()) {
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/JabRef-linux-icon-64.png",
                    '--app-version', "${project.version}",
            ]
            installerOptions = [
                    '--verbose',
                    '--vendor', 'JabRef',
                    '--app-version', "${project.version}",
                    // '--temp', "$buildDir/installer",
                    '--resource-dir', "${projectDir}/buildres/linux",
                    '--linux-menu-group', 'Office;',
                    '--linux-rpm-license-type', 'MIT',
                    // '--license-file', "${projectDir}/LICENSE.md",
                    '--description', 'JabRef is an open source bibliography reference manager. The native file format used by JabRef is BibTeX, the standard LaTeX bibliography format.',
                    '--linux-shortcut',
                    '--file-associations', "${projectDir}/buildres/linux/bibtexAssociations.properties"
            ]
        }

        if (OperatingSystem.current().isMacOsX()) {
            imageOptions = [
                    '--icon', "${projectDir}/src/main/resources/icons/jabref.icns",
                    '--resource-dir', "${projectDir}/buildres/mac"
            ]
            // Notarized mac images and packages are built on the pipeline only
            skipInstaller = true
            installerOptions = [
                    '--verbose',
                    '--vendor', 'JabRef',
                    '--mac-package-identifier', "JabRef",
                    '--mac-package-name', "JabRef",
                    '--app-version', "${project.version}",
                    '--file-associations', "${projectDir}/buildres/mac/bibtexAssociations.properties",
                    '--resource-dir', "${projectDir}/buildres/mac"
            ]
        }
    }
}

if (OperatingSystem.current().isWindows()) {
    tasks.jpackageImage.doLast {
        copy {
            from("${projectDir}/buildres/windows") {
                include "jabref-firefox.json", "jabref-chrome.json", "JabRefHost.bat", "JabRefHost.ps1"
            }
            into "$buildDir/distribution/JabRef"
        }
    }
}

if (OperatingSystem.current().isLinux()) {
    tasks.jpackageImage.doLast {
        copy {
            from("${projectDir}/buildres/linux") {
                include "native-messaging-host/**", "jabrefHost.py"
            }
            into "$buildDir/distribution/JabRef/lib"
        }
    }
}

if (OperatingSystem.current().isMacOsX()) {
    tasks.jpackageImage.doLast {
        copy {
            from("${projectDir}/buildres/mac") {
                include "native-messaging-host/**", "jabrefHost.py"
            }
            into "$buildDir/distribution/JabRef.app/Contents/Resources"
        }
    }
}

requirementTracing {
    inputDirectories = files('docs', 'src/main/java', 'src/test/java')
}
