name: Tests

on: [push]

jobs:
  checkstyle:
    name: Checkstyle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - uses: actions/cache@v1
        name: Restore gradle cache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - uses: actions/cache@v1
        name: Restore gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Run checkstyle
        run: ./gradlew checkstyleMain checkstyleTest checkstyleJmh
  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - uses: actions/cache@v1
        name: Restore gradle chache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - uses: actions/cache@v1
        name: Restore gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Run tests
        run: xvfb-run --auto-servernum ./gradlew check -x checkstyleJmh -x checkstyleMain -x checkstyleTest
        env:
          CI: "true"
      - name: Format failed test results
        if: failure()
        run: |
          sudo apt-get install -qq -y xml-twig-tools xsltproc
          scripts/after-failure.sh
  databasetests:
    name: Database tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - uses: actions/cache@v1
        name: Restore gradle chache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - uses: actions/cache@v1
        name: Restore gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Run tests on PostgreSQL
        run: ./gradlew databaseTest --rerun-tasks
        env:
          CI: "true"
          DBMS: "postgresql"
      - name: Shutdown Ubuntu MySQL
        run: sudo service mysql stop # Shutdown the Default MySQL, "sudo" is necessary, please not remove it
      - name: Start custom MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3800
          container port: 3307
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mysql version: '8.0'
          mysql database: 'jabref'
          mysql root password: 'root'
      - name: Run tests on MySQL
        run: ./gradlew databaseTest --rerun-tasks
        env:
          CI: "true"
          DBMS: "mysql"
      - name: Cache Oracle XE downloads
        uses: actions/cache@v1
        with:
          path: ~/oracle-xe
          key: ${{ runner.os }}-oraclexe-rpm-${{ hashFiles('.github/workflows/tests.yml') }}
      - name: Cache built docker image
        uses: actions/cache@v1
        with:
          path: /var/lib/docker/graph/
          key: ${{ runner.os }}-oraclexe-docker-${{ hashFiles('.github/workflows/tests.yml') }}
      - name: Start Oracle XE
        run: |
          mkdir ~/oracle-xe || true
          cd ~/oracle-xe
          wget -qN https://github.com/deusaquilus/docker-oracle-xe/archive/master.zip
          unzip master.zip
          cd docker-oracle-xe-master
          wget -qN http://ccrypt.sourceforge.net/download/1.11/ccrypt-1.11.linux-x86_64.tar.gz
          wget -qN -O files/oracle-database-xe-18c-1.0-1.x86_64.rpm.cpt https://files.jabref.org/thing.cpt
          pwd
          tar xzf ccrypt-1.11.linux-x86_64.tar.gz
          ccrypt-1.11.linux-x86_64/ccrypt -d -E CCRYPT files/oracle-database-xe-18c-1.0-1.x86_64.rpm.cpt
          docker build -t oracle-xe:18c .
          docker run -d -p 32118:1521 -p 35518:5500 --name=oracle-xe oracle-xe:18c
          # give oracle some time to start
          sleep 90
          docker logs oracle-xe
          # path `/opt/oracle/product/18c/dbhomeXE` is taken from the `Dockerfile` used to build "oracle-xe"
          docker exec -i oracle-xe bash -c "source /home/oracle/.bashrc; /bin/bash -c '/opt/oracle/product/18c/dbhomeXE/bin/sqlplus sys/Oracle18@localhost/XEPDB1 as sysdba'" < $GITHUB_WORKSPACE/buildres/setup-test-oracle.sql
        env:
          CCRYPT: ${{ secrets.CCRYPT }}
      - name: Run database test
        run: ./gradlew databaseTest --rerun-tasks
        env:
          DBMS: "oracle"
  fetchertests:
    name: Fetcher tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - uses: actions/cache@v1
        name: Restore gradle chache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - uses: actions/cache@v1
        name: Restore gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Run fetcher tests
        run: ./gradlew fetcherTest
        env:
          CI: "true"
  guitests:
    name: GUI tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - uses: actions/cache@v1
        name: Restore gradle chache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - uses: actions/cache@v1
        name: Restore gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Run GUI tests
        run: xvfb-run --auto-servernum ./gradlew guiTest
        env:
          CI: "true"
  codecoverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - uses: actions/cache@v1
        name: Restore gradle chache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - uses: actions/cache@v1
        name: Restore gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Update test coverage metrics
        run: xvfb-run --auto-servernum ./gradlew jacocoTestReport && bash <(curl -s https://codecov.io/bash);
        env:
          CI: "false" # we pretend to run locally - even if tests fail on the CI, they count towards test coverage
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          DBMS: "postgresql"
