name: Tests

on: [push]

jobs:
  checkstyle:
    name: Checkstyle
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v1
      with:
        depth: 1
        submodules: false
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 13
    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.OS }}-gradle-${{ env.cache-name }}-
          ${{ runner.OS }}-gradle-
          ${{ runner.OS }}-
    - uses: actions/cache@v1
      name: Cache gradle wrapper
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
    - name: Run checkstyle
      run: ./gradlew checkstyleMain checkstyleTest checkstyleJmh
  test:
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13
      - name: Checkout source
        uses: actions/checkout@v1
        with:
          depth: 1
          submodules: false
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - uses: actions/cache@v1
        name: Cache gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Run basic tests (without checkstyle)
        run: xvfb-run --auto-servernum ./gradlew check -x checkstyleJmh -x checkstyleMain -x checkstyleTest
        env:
          CI: "true"
      - name: Run tests on PostgreSQL
        run: ./gradlew databaseTest
        env:
          CI: "true"
          DBMS: "postgresql"
      - name: Update test coverage metrics
        run: xvfb-run --auto-servernum ./gradlew jacocoTestReport && bash <(curl -s https://codecov.io/bash);
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          DBMS: "postgresql"
      - name: Update test coverage metrics (in case of failure)
        run: xvfb-run --auto-servernum ./gradlew jacocoTestReport && bash <(curl -s https://codecov.io/bash);
        if: failure()
        env:
          CI: "false" # we pretend to run locally - even if tests fail on the CI, they count towards test coverage
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          DBMS: "postgresql"
      - name: Shutdown Ubuntu MySQL
        run: sudo service mysql stop # Shutdown the Default MySQL, "sudo" is necessary, please not remove it
      - name: Start custom MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3800
          container port: 3307
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mysql version: '8.0'
          mysql database: 'jabref'
          mysql root password: 'root'
      - name: Run tests on MySQL
        run: ./gradlew databaseTest
        env:
          CI: "true"
          DBMS: "mysql"
      - name: Run fetcher tests
        run: ./gradlew fetcherTest
        env:
          CI: "true"
      - name: Run GUI tests
        run: xvfb-run --auto-servernum ./gradlew guiTest
        env:
          CI: "true"
      - name: Format failed test results
        if: failure()
        run: |
          sudo apt-get install -qq -y xml-twig-tools xsltproc
          scripts/after-failure.sh
