name: Deployment

on:
  push:
    branches:
      - master
      - master-release
    paths-ignore:
      - 'docs/**'
      - 'src/test/**'
      - 'README.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'src/test/**'
      - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
         - os: ubuntu-latest
           displayName: linux
           jpackageDownload: https://download.java.net/java/early_access/jdk14/34/GPL/openjdk-14-ea+34_linux-x64_bin.tar.gz
           jdk14Path: /jdk-14
           archivePortable: tar -c -C build/distribution JabRef | pigz --rsyncable > build/distribution/JabRef-portable_linux.tar.gz && rm -R build/distribution/JabRef
         - os: windows-latest
           displayName: windows
           jpackageDownload: https://download.java.net/java/early_access/jdk14/34/GPL/openjdk-14-ea+34_windows-x64_bin.zip
           jdk14Path: /jdk-14
           archivePortable: 7z a -r build/distribution/JabRef-portable_windows.zip ./build/distribution/JabRef && rm -R build/distribution/JabRef
         - os: macOS-latest
           displayName: macOS
           jpackageDownload: https://download.java.net/java/early_access/jdk14/34/GPL/openjdk-14-ea+34_osx-x64_bin.tar.gz
           jdk14Path: /jdk-14.jdk/Contents/Home
           archivePortable: brew install pigz && tar -c -C build/distribution JabRef.app | pigz --rsyncable > build/distribution/JabRef-portable_macos.tar.gz && rm -R build/distribution/JabRef.app

    runs-on: ${{ matrix.os }}
    name: Create installer and portable version for ${{ matrix.displayName }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.1
        with:
            versionSpec: '5.1.3'
      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 13.0.2
      # configuration based on https://github.com/actions/cache/blob/master/examples.md#java---gradle
      - uses: actions/cache@v1
        name: Restore gradle cache
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.OS }}-gradle-${{ env.cache-name }}-
            ${{ runner.OS }}-gradle-
            ${{ runner.OS }}-
      - uses: actions/cache@v1
        name: Cache gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Download jpackage
        # We need to download jpackage from https://jdk.java.net/jpackage/
        run: |
          import tarfile
          import zipfile
          import sys
          if sys.version_info[0] >= 3:
            from urllib.request import urlretrieve
          else:
            from urllib import urlretrieve

          url = "${{ matrix.jpackageDownload }}"
          tmpfile, headers = urlretrieve(url)
          if (url.endswith("tar.gz")):
            tar = tarfile.open(tmpfile)
            tar.extractall()
            tar.close()
          elif (url.endswith("zip")):
            zip = zipfile.ZipFile(tmpfile)
            zip.extractall()
            zip.close()
        shell: python
      - name: Build runtime image
        run: ./gradlew -PprojVersion="${{ steps.gitversion.outputs.AssemblySemVer }}" -PprojVersionInfo="${{ steps.gitversion.outputs.InformationalVersion }}" jlinkZip
      - name: Build installer
        run: |
          export BADASS_JLINK_JPACKAGE_HOME="${GITHUB_WORKSPACE}${{ matrix.jdk14Path }}"
          ./gradlew -PprojVersion="${{ steps.gitversion.outputs.AssemblySemVer }}" -PprojVersionInfo="${{ steps.gitversion.outputs.InformationalVersion }}" jpackage
        shell: bash
      - name: Package application image
        run: ${{ matrix.archivePortable }}
        shell: bash
      - name: Rename files
        run: |
          get-childitem -Path build/distribution/*
          get-childitem -Path build/distribution/* | rename-item -NewName {$_.name -replace "${{ steps.gitversion.outputs.AssemblySemVer }}","${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor }}"}
          get-childitem -Path build/distribution/* | rename-item -NewName {$_.name -replace "portable","${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor }}-portable"}
        shell: pwsh
      - name: Upload to GitHub workflow artifacts store
        uses: actions/upload-artifact@master
        with:
          name: JabRef-${{ matrix.displayName }}
          path: build/distribution
  deploy:
    name: Deploy binaries on builds.jabref.org
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.1
        with:
            versionSpec: '5.1.3'
      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.1
      - name: Get linux binaries
        uses: actions/download-artifact@master
        with:
          name: JabRef-linux
          path: build/distribution
      - name: Get windows binaries
        uses: actions/download-artifact@master
        with:
          name: JabRef-windows
          path: build/distribution
      - name: Get macOS binaries
        uses: actions/download-artifact@master
        with:
          name: JabRef-macOS
          path: build/distribution/
      - name: Deploy to builds.jabref.org
        id: deploy
        uses: Pendect/action-rsyncer@v1.1.0
        env:
          DEPLOY_KEY: ${{ secrets.buildJabRefPrivateKey }}
          BRANCH: ${{ steps.gitversion.outputs.branchName }}
        with:
          flags: -vaz --itemize-changes --stats --partial-dir=/tmp/partial --rsync-path="mkdir -p /var/www/builds.jabref.org/www/${{ steps.gitversion.outputs.branchName }} && rsync"
          options: ''
          ssh_options: '-p 9922'
          src: 'build/distribution/'
          dest: jrrsync@build-upload.jabref.org:/var/www/builds.jabref.org/www/${{ steps.gitversion.outputs.branchName }}/
